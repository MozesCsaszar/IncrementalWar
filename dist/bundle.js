(() => { "use strict"; var t = { 265: t => { t.exports = function (t, e, s) { if (null == t || null == e) return t; var i = String(t), n = "number" == typeof e ? e : parseInt(e, 10); if (isNaN(n) || !isFinite(n)) return i; var r = i.length; if (r >= n) return i; var o = null == s ? "" : String(s); "" === o && (o = " "); for (var a = n - r; o.length < a;)o += o; return i + (o.length > a ? o.substr(0, a) : o) } } }, e = {}; function s(i) { var n = e[i]; if (void 0 !== n) return n.exports; var r = e[i] = { exports: {} }; return t[i](r, r.exports, s), r.exports } s.n = t => { var e = t && t.__esModule ? () => t.default : () => t; return s.d(e, { a: e }), e }, s.d = (t, e) => { for (var i in e) s.o(e, i) && !s.o(t, i) && Object.defineProperty(t, i, { enumerable: !0, get: e[i] }) }, s.o = (t, e) => Object.prototype.hasOwnProperty.call(t, e); var i = {}; (() => { s.d(i, { GM: () => _t, J: () => Mt }); var t = s(265), e = s.n(t), n = 9e15, r = function () { for (var t = [], e = -323; e <= 308; e++)t.push(Number("1e" + e)); return function (e) { return t[e + 323] } }(), o = function (t) { return t instanceof c ? t : new c(t) }, a = function (t, e) { return (new c).fromMantissaExponent(t, e) }, h = function (t, e) { return (new c).fromMantissaExponent_noNormalize(t, e) }; function l(t, e, s, i) { var n = e.mul(s.pow(i)); return c.floor(t.div(n).mul(s.sub(1)).add(1).log10() / s.log10()) } function u(t, e, s, i) { return e.mul(s.pow(i)).mul(c.sub(1, s.pow(t))).div(c.sub(1, s)) } var c = function () { function t(e) { this.mantissa = NaN, this.exponent = NaN, void 0 === e ? (this.m = 0, this.e = 0) : e instanceof t ? this.fromDecimal(e) : "number" == typeof e ? this.fromNumber(e) : this.fromString(e) } return Object.defineProperty(t.prototype, "m", { get: function () { return this.mantissa }, set: function (t) { this.mantissa = t }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "e", { get: function () { return this.exponent }, set: function (t) { this.exponent = t }, enumerable: !1, configurable: !0 }), Object.defineProperty(t.prototype, "s", { get: function () { return this.sign() }, set: function (t) { if (0 === t) return this.e = 0, void (this.m = 0); this.sgn() !== t && (this.m = -this.m) }, enumerable: !1, configurable: !0 }), t.fromMantissaExponent = function (e, s) { return (new t).fromMantissaExponent(e, s) }, t.fromMantissaExponent_noNormalize = function (e, s) { return (new t).fromMantissaExponent_noNormalize(e, s) }, t.fromDecimal = function (e) { return (new t).fromDecimal(e) }, t.fromNumber = function (e) { return (new t).fromNumber(e) }, t.fromString = function (e) { return (new t).fromString(e) }, t.fromValue = function (e) { return (new t).fromValue(e) }, t.fromValue_noAlloc = function (e) { return e instanceof t ? e : new t(e) }, t.abs = function (t) { return o(t).abs() }, t.neg = function (t) { return o(t).neg() }, t.negate = function (t) { return o(t).neg() }, t.negated = function (t) { return o(t).neg() }, t.sign = function (t) { return o(t).sign() }, t.sgn = function (t) { return o(t).sign() }, t.round = function (t) { return o(t).round() }, t.floor = function (t) { return o(t).floor() }, t.ceil = function (t) { return o(t).ceil() }, t.trunc = function (t) { return o(t).trunc() }, t.add = function (t, e) { return o(t).add(e) }, t.plus = function (t, e) { return o(t).add(e) }, t.sub = function (t, e) { return o(t).sub(e) }, t.subtract = function (t, e) { return o(t).sub(e) }, t.minus = function (t, e) { return o(t).sub(e) }, t.mul = function (t, e) { return o(t).mul(e) }, t.multiply = function (t, e) { return o(t).mul(e) }, t.times = function (t, e) { return o(t).mul(e) }, t.div = function (t, e) { return o(t).div(e) }, t.divide = function (t, e) { return o(t).div(e) }, t.recip = function (t) { return o(t).recip() }, t.reciprocal = function (t) { return o(t).recip() }, t.reciprocate = function (t) { return o(t).reciprocate() }, t.cmp = function (t, e) { return o(t).cmp(e) }, t.compare = function (t, e) { return o(t).cmp(e) }, t.eq = function (t, e) { return o(t).eq(e) }, t.equals = function (t, e) { return o(t).eq(e) }, t.neq = function (t, e) { return o(t).neq(e) }, t.notEquals = function (t, e) { return o(t).notEquals(e) }, t.lt = function (t, e) { return o(t).lt(e) }, t.lte = function (t, e) { return o(t).lte(e) }, t.gt = function (t, e) { return o(t).gt(e) }, t.gte = function (t, e) { return o(t).gte(e) }, t.max = function (t, e) { return o(t).max(e) }, t.min = function (t, e) { return o(t).min(e) }, t.clamp = function (t, e, s) { return o(t).clamp(e, s) }, t.clampMin = function (t, e) { return o(t).clampMin(e) }, t.clampMax = function (t, e) { return o(t).clampMax(e) }, t.cmp_tolerance = function (t, e, s) { return o(t).cmp_tolerance(e, s) }, t.compare_tolerance = function (t, e, s) { return o(t).cmp_tolerance(e, s) }, t.eq_tolerance = function (t, e, s) { return o(t).eq_tolerance(e, s) }, t.equals_tolerance = function (t, e, s) { return o(t).eq_tolerance(e, s) }, t.neq_tolerance = function (t, e, s) { return o(t).neq_tolerance(e, s) }, t.notEquals_tolerance = function (t, e, s) { return o(t).notEquals_tolerance(e, s) }, t.lt_tolerance = function (t, e, s) { return o(t).lt_tolerance(e, s) }, t.lte_tolerance = function (t, e, s) { return o(t).lte_tolerance(e, s) }, t.gt_tolerance = function (t, e, s) { return o(t).gt_tolerance(e, s) }, t.gte_tolerance = function (t, e, s) { return o(t).gte_tolerance(e, s) }, t.log10 = function (t) { return o(t).log10() }, t.absLog10 = function (t) { return o(t).absLog10() }, t.pLog10 = function (t) { return o(t).pLog10() }, t.log = function (t, e) { return o(t).log(e) }, t.log2 = function (t) { return o(t).log2() }, t.ln = function (t) { return o(t).ln() }, t.logarithm = function (t, e) { return o(t).logarithm(e) }, t.pow10 = function (t) { return Number.isInteger(t) ? h(1, t) : a(Math.pow(10, t % 1), Math.trunc(t)) }, t.pow = function (t, e) { return "number" == typeof t && 10 === t && "number" == typeof e && Number.isInteger(e) ? h(1, e) : o(t).pow(e) }, t.exp = function (t) { return o(t).exp() }, t.sqr = function (t) { return o(t).sqr() }, t.sqrt = function (t) { return o(t).sqrt() }, t.cube = function (t) { return o(t).cube() }, t.cbrt = function (t) { return o(t).cbrt() }, t.dp = function (t) { return o(t).dp() }, t.decimalPlaces = function (t) { return o(t).dp() }, t.affordGeometricSeries = function (t, e, s, i) { return l(o(t), o(e), o(s), i) }, t.sumGeometricSeries = function (t, e, s, i) { return u(t, o(e), o(s), i) }, t.affordArithmeticSeries = function (t, e, s, i) { return function (t, e, s, i) { var n = e.add(i.mul(s)).sub(s.div(2)), r = n.pow(2); return n.neg().add(r.add(s.mul(t).mul(2)).sqrt()).div(s).floor() }(o(t), o(e), o(s), o(i)) }, t.sumArithmeticSeries = function (t, e, s, i) { return function (t, e, s, i) { var n = e.add(i.mul(s)); return t.div(2).mul(n.mul(2).plus(t.sub(1).mul(s))) }(o(t), o(e), o(s), o(i)) }, t.efficiencyOfPurchase = function (t, e, s) { return function (t, e, s) { return t.div(e).add(t.div(s)) }(o(t), o(e), o(s)) }, t.randomDecimalForTesting = function (t) { if (20 * Math.random() < 1) return h(0, 0); var e = 10 * Math.random(); 10 * Math.random() < 1 && (e = Math.round(e)), e *= Math.sign(2 * Math.random() - 1); var s = Math.floor(Math.random() * t * 2) - t; return a(e, s) }, t.prototype.normalize = function () { if (this.m >= 1 && this.m < 10) return this; if (0 === this.m) return this.m = 0, this.e = 0, this; var t = Math.floor(Math.log10(Math.abs(this.m))); return this.m = -324 === t ? 10 * this.m / 1e-323 : this.m / r(t), this.e += t, this }, t.prototype.fromMantissaExponent = function (t, e) { return isFinite(t) && isFinite(e) ? (this.m = t, this.e = e, this.normalize(), this) : (t = Number.NaN, e = Number.NaN, this) }, t.prototype.fromMantissaExponent_noNormalize = function (t, e) { return this.m = t, this.e = e, this }, t.prototype.fromDecimal = function (t) { return this.m = t.m, this.e = t.e, this }, t.prototype.fromNumber = function (t) { return isNaN(t) ? (this.m = Number.NaN, this.e = Number.NaN) : t === Number.POSITIVE_INFINITY ? (this.m = 1, this.e = n) : t === Number.NEGATIVE_INFINITY ? (this.m = -1, this.e = n) : 0 === t ? (this.m = 0, this.e = 0) : (this.e = Math.floor(Math.log10(Math.abs(t))), this.m = -324 === this.e ? 10 * t / 1e-323 : t / r(this.e), this.normalize()), this }, t.prototype.fromString = function (t) { if (-1 !== t.indexOf("e")) { var e = t.split("e"); this.m = parseFloat(e[0]), this.e = parseFloat(e[1]), this.normalize() } else if ("NaN" === t) this.m = Number.NaN, this.e = Number.NaN; else if (this.fromNumber(parseFloat(t)), isNaN(this.m)) throw Error("[DecimalError] Invalid argument: " + t); return this }, t.prototype.fromValue = function (e) { return e instanceof t ? this.fromDecimal(e) : "number" == typeof e ? this.fromNumber(e) : "string" == typeof e ? this.fromString(e) : (this.m = 0, this.e = 0, this) }, t.prototype.toNumber = function () { if (!isFinite(this.e)) return Number.NaN; if (this.e > 308) return this.m > 0 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY; if (this.e < -324) return 0; if (-324 === this.e) return this.m > 0 ? 5e-324 : -5e-324; var t = this.m * r(this.e); if (!isFinite(t) || this.e < 0) return t; var e = Math.round(t); return Math.abs(e - t) < 1e-10 ? e : t }, t.prototype.mantissaWithDecimalPlaces = function (t) { if (isNaN(this.m) || isNaN(this.e)) return Number.NaN; if (0 === this.m) return 0; var e = t + 1, s = Math.ceil(Math.log10(Math.abs(this.m))), i = Math.round(this.m * Math.pow(10, e - s)) * Math.pow(10, s - e); return parseFloat(i.toFixed(Math.max(e - s, 0))) }, t.prototype.toString = function () { return isNaN(this.m) || isNaN(this.e) ? "NaN" : this.e >= n ? this.m > 0 ? "Infinity" : "-Infinity" : this.e <= -n || 0 === this.m ? "0" : this.e < 21 && this.e > -7 ? this.toNumber().toString() : this.m + "e" + (this.e >= 0 ? "+" : "") + this.e }, t.prototype.toExponential = function (t) { if (isNaN(this.m) || isNaN(this.e)) return "NaN"; if (this.e >= n) return this.m > 0 ? "Infinity" : "-Infinity"; if (this.e <= -n || 0 === this.m) return "0" + (t > 0 ? e()(".", t + 1, "0") : "") + "e+0"; if (this.e > -324 && this.e < 308) return this.toNumber().toExponential(t); isFinite(t) || (t = 17); var s = t + 1, i = Math.max(1, Math.ceil(Math.log10(Math.abs(this.m)))); return (Math.round(this.m * Math.pow(10, s - i)) * Math.pow(10, i - s)).toFixed(Math.max(s - i, 0)) + "e" + (this.e >= 0 ? "+" : "") + this.e }, t.prototype.toFixed = function (t) { return isNaN(this.m) || isNaN(this.e) ? "NaN" : this.e >= n ? this.m > 0 ? "Infinity" : "-Infinity" : this.e <= -n || 0 === this.m ? "0" + (t > 0 ? e()(".", t + 1, "0") : "") : this.e >= 17 ? this.m.toString().replace(".", "").padEnd(this.e + 1, "0") + (t > 0 ? e()(".", t + 1, "0") : "") : this.toNumber().toFixed(t) }, t.prototype.toPrecision = function (t) { return this.e <= -7 ? this.toExponential(t - 1) : t > this.e ? this.toFixed(t - this.e - 1) : this.toExponential(t - 1) }, t.prototype.valueOf = function () { return this.toString() }, t.prototype.toJSON = function () { return this.toString() }, t.prototype.toStringWithDecimalPlaces = function (t) { return this.toExponential(t) }, t.prototype.abs = function () { return h(Math.abs(this.m), this.e) }, t.prototype.neg = function () { return h(-this.m, this.e) }, t.prototype.negate = function () { return this.neg() }, t.prototype.negated = function () { return this.neg() }, t.prototype.sign = function () { return Math.sign(this.m) }, t.prototype.sgn = function () { return this.sign() }, t.prototype.round = function () { return this.e < -1 ? new t(0) : this.e < 17 ? new t(Math.round(this.toNumber())) : this }, t.prototype.floor = function () { return this.e < -1 ? Math.sign(this.m) >= 0 ? new t(0) : new t(-1) : this.e < 17 ? new t(Math.floor(this.toNumber())) : this }, t.prototype.ceil = function () { return this.e < -1 ? Math.sign(this.m) > 0 ? new t(1) : new t(0) : this.e < 17 ? new t(Math.ceil(this.toNumber())) : this }, t.prototype.trunc = function () { return this.e < 0 ? new t(0) : this.e < 17 ? new t(Math.trunc(this.toNumber())) : this }, t.prototype.add = function (t) { var e, s, i = o(t); if (0 === this.m) return i; if (0 === i.m) return this; if (this.e >= i.e ? (e = this, s = i) : (e = i, s = this), e.e - s.e > 17) return e; var n = Math.round(1e14 * e.m + 1e14 * s.m * r(s.e - e.e)); return a(n, e.e - 14) }, t.prototype.plus = function (t) { return this.add(t) }, t.prototype.sub = function (t) { return this.add(o(t).neg()) }, t.prototype.subtract = function (t) { return this.sub(t) }, t.prototype.minus = function (t) { return this.sub(t) }, t.prototype.mul = function (e) { if ("number" == typeof e) return e < 1e307 && e > -1e307 ? a(this.m * e, this.e) : a(1e-307 * this.m * e, this.e + 307); var s = "string" == typeof e ? new t(e) : e; return a(this.m * s.m, this.e + s.e) }, t.prototype.multiply = function (t) { return this.mul(t) }, t.prototype.times = function (t) { return this.mul(t) }, t.prototype.div = function (t) { return this.mul(o(t).recip()) }, t.prototype.divide = function (t) { return this.div(t) }, t.prototype.divideBy = function (t) { return this.div(t) }, t.prototype.dividedBy = function (t) { return this.div(t) }, t.prototype.recip = function () { return a(1 / this.m, -this.e) }, t.prototype.reciprocal = function () { return this.recip() }, t.prototype.reciprocate = function () { return this.recip() }, t.prototype.cmp = function (t) { var e = o(t); if (0 === this.m) { if (0 === e.m) return 0; if (e.m < 0) return 1; if (e.m > 0) return -1 } if (0 === e.m) { if (this.m < 0) return -1; if (this.m > 0) return 1 } if (this.m > 0) return e.m < 0 || this.e > e.e ? 1 : this.e < e.e ? -1 : this.m > e.m ? 1 : this.m < e.m ? -1 : 0; if (this.m < 0) return e.m > 0 || this.e > e.e ? -1 : this.e < e.e || this.m > e.m ? 1 : this.m < e.m ? -1 : 0; throw Error("Unreachable code") }, t.prototype.compare = function (t) { return this.cmp(t) }, t.prototype.eq = function (t) { var e = o(t); return this.e === e.e && this.m === e.m }, t.prototype.equals = function (t) { return this.eq(t) }, t.prototype.neq = function (t) { return !this.eq(t) }, t.prototype.notEquals = function (t) { return this.neq(t) }, t.prototype.lt = function (t) { var e = o(t); return 0 === this.m ? e.m > 0 : 0 === e.m ? this.m <= 0 : this.e === e.e ? this.m < e.m : this.m > 0 ? e.m > 0 && this.e < e.e : e.m > 0 || this.e > e.e }, t.prototype.lte = function (t) { return !this.gt(t) }, t.prototype.gt = function (t) { var e = o(t); return 0 === this.m ? e.m < 0 : 0 === e.m ? this.m > 0 : this.e === e.e ? this.m > e.m : this.m > 0 ? e.m < 0 || this.e > e.e : e.m < 0 && this.e < e.e }, t.prototype.gte = function (t) { return !this.lt(t) }, t.prototype.max = function (t) { var e = o(t); return this.lt(e) ? e : this }, t.prototype.min = function (t) { var e = o(t); return this.gt(e) ? e : this }, t.prototype.clamp = function (t, e) { return this.max(t).min(e) }, t.prototype.clampMin = function (t) { return this.max(t) }, t.prototype.clampMax = function (t) { return this.min(t) }, t.prototype.cmp_tolerance = function (t, e) { var s = o(t); return this.eq_tolerance(s, e) ? 0 : this.cmp(s) }, t.prototype.compare_tolerance = function (t, e) { return this.cmp_tolerance(t, e) }, t.prototype.eq_tolerance = function (e, s) { var i = o(e); return t.lte(this.sub(i).abs(), t.max(this.abs(), i.abs()).mul(s)) }, t.prototype.equals_tolerance = function (t, e) { return this.eq_tolerance(t, e) }, t.prototype.neq_tolerance = function (t, e) { return !this.eq_tolerance(t, e) }, t.prototype.notEquals_tolerance = function (t, e) { return this.neq_tolerance(t, e) }, t.prototype.lt_tolerance = function (t, e) { var s = o(t); return !this.eq_tolerance(s, e) && this.lt(s) }, t.prototype.lte_tolerance = function (t, e) { var s = o(t); return this.eq_tolerance(s, e) || this.lt(s) }, t.prototype.gt_tolerance = function (t, e) { var s = o(t); return !this.eq_tolerance(s, e) && this.gt(s) }, t.prototype.gte_tolerance = function (t, e) { var s = o(t); return this.eq_tolerance(s, e) || this.gt(s) }, t.prototype.log10 = function () { return this.e + Math.log10(this.m) }, t.prototype.absLog10 = function () { return this.e + Math.log10(Math.abs(this.m)) }, t.prototype.pLog10 = function () { return this.m <= 0 || this.e < 0 ? 0 : this.log10() }, t.prototype.log = function (t) { return Math.LN10 / Math.log(t) * this.log10() }, t.prototype.log2 = function () { return 3.321928094887362 * this.log10() }, t.prototype.ln = function () { return 2.302585092994045 * this.log10() }, t.prototype.logarithm = function (t) { return this.log(t) }, t.prototype.pow = function (e) { var s, i = e instanceof t ? e.toNumber() : e, n = this.e * i; if (Number.isSafeInteger(n) && (s = Math.pow(this.m, i), isFinite(s) && 0 !== s)) return a(s, n); var r = Math.trunc(n), o = n - r; if (s = Math.pow(10, i * Math.log10(this.m) + o), isFinite(s) && 0 !== s) return a(s, r); var h = t.pow10(i * this.absLog10()); return -1 === this.sign() ? 1 === Math.abs(i % 2) ? h.neg() : 0 === Math.abs(i % 2) ? h : new t(Number.NaN) : h }, t.prototype.pow_base = function (t) { return o(t).pow(this) }, t.prototype.factorial = function () { var e = this.toNumber() + 1; return t.pow(e / Math.E * Math.sqrt(e * Math.sinh(1 / e) + 1 / (810 * Math.pow(e, 6))), e).mul(Math.sqrt(2 * Math.PI / e)) }, t.prototype.exp = function () { var e = this.toNumber(); return -706 < e && e < 709 ? t.fromNumber(Math.exp(e)) : t.pow(Math.E, e) }, t.prototype.sqr = function () { return a(Math.pow(this.m, 2), 2 * this.e) }, t.prototype.sqrt = function () { return this.m < 0 ? new t(Number.NaN) : this.e % 2 != 0 ? a(3.16227766016838 * Math.sqrt(this.m), Math.floor(this.e / 2)) : a(Math.sqrt(this.m), Math.floor(this.e / 2)) }, t.prototype.cube = function () { return a(Math.pow(this.m, 3), 3 * this.e) }, t.prototype.cbrt = function () { var t = 1, e = this.m; e < 0 && (t = -1, e = -e); var s = t * Math.pow(e, 1 / 3), i = this.e % 3; return a(1 === i || -1 === i ? 2.154434690031883 * s : 0 !== i ? 4.641588833612778 * s : s, Math.floor(this.e / 3)) }, t.prototype.sinh = function () { return this.exp().sub(this.negate().exp()).div(2) }, t.prototype.cosh = function () { return this.exp().add(this.negate().exp()).div(2) }, t.prototype.tanh = function () { return this.sinh().div(this.cosh()) }, t.prototype.asinh = function () { return t.ln(this.add(this.sqr().add(1).sqrt())) }, t.prototype.acosh = function () { return t.ln(this.add(this.sqr().sub(1).sqrt())) }, t.prototype.atanh = function () { return this.abs().gte(1) ? Number.NaN : t.ln(this.add(1).div(new t(1).sub(this))) / 2 }, t.prototype.ascensionPenalty = function (t) { return 0 === t ? this : this.pow(Math.pow(10, -t)) }, t.prototype.egg = function () { return this.add(9) }, t.prototype.lessThanOrEqualTo = function (t) { return this.cmp(t) < 1 }, t.prototype.lessThan = function (t) { return this.cmp(t) < 0 }, t.prototype.greaterThanOrEqualTo = function (t) { return this.cmp(t) > -1 }, t.prototype.greaterThan = function (t) { return this.cmp(t) > 0 }, t.prototype.decimalPlaces = function () { return this.dp() }, t.prototype.dp = function () { if (!isFinite(this.mantissa)) return NaN; if (this.exponent >= 17) return 0; for (var t = this.mantissa, e = -this.exponent, s = 1; Math.abs(Math.round(t * s) / s - t) > 1e-10;)s *= 10, e++; return e > 0 ? e : 0 }, Object.defineProperty(t, "MAX_VALUE", { get: function () { return d }, enumerable: !1, configurable: !0 }), Object.defineProperty(t, "MIN_VALUE", { get: function () { return m }, enumerable: !1, configurable: !0 }), Object.defineProperty(t, "NUMBER_MAX_VALUE", { get: function () { return g }, enumerable: !1, configurable: !0 }), Object.defineProperty(t, "NUMBER_MIN_VALUE", { get: function () { return p }, enumerable: !1, configurable: !0 }), t }(), d = h(1, n), m = h(1, -n), g = o(Number.MAX_VALUE), p = o(Number.MIN_VALUE); const f = c, y = (t, e) => t instanceof f && e instanceof f ? t.gt(e) ? "red" : t.lt(e) ? "green" : "var(--default-color)" : t == e ? "var(--default-color)" : t > e ? "red" : "green", w = (t, e = !1) => t.exponent >= 6 ? t.mantissa.toFixed(2) + "e" + t.exponent : e || t.exponent > 4 ? (t.mantissa * Math.pow(10, t.exponent)).toFixed(0) : (t.mantissa * Math.pow(10, t.exponent)).toFixed(Math.min(5 - t.exponent, 2)), b = t => $(t).toArray(), v = t => $(t).get(0), T = t => t.join("."), B = (t, e) => e[T(t)]; class L { get(t) { return this[t] } set(t, e) { this[t] = e } } class k { constructor(t = [], e, s) { this.bosses = t, this.maxSelectibleArmies = e, this.loseSoldiers = s, this.selectedArmies = []; for (let t = 0; t < e; t++)this.selectedArmies.push(-1) } } class A { constructor(t) { this.name = t, this.container = $(t + "Container").get(0), this.timesVisited = 0 } get hidden() { return this.container.hidden } set hidden(t) { this.container.hidden = t } initializeEventListeners() { } displayOnLoad() { } display() { } displayEveryTick() { } save() { return String(this.timesVisited) } load(t) { return this.timesVisited = Number(t[0]), 1 } } class x { constructor(t, e, s, i, n, r = []) { this.container = $(t).get(0), this.elements = $(t + " > " + e).toArray(), this.elementsVisible = []; for (let t = 0; t < this.elements.length; t++)this.elementsVisible.push(!0); const o = t + " > .element_list_buttons_container > " + s, a = t + " > .element_list_buttons_container > " + i, h = t + " > .element_list_buttons_container > " + n; this.previousButton = v(o), this.backButton = v(a), this.nextButton = v(h), this.buttonsVisible = [!0, !0, !0], this.itemList = r, this.page = 0, this.initializeEventListeners() } get hidden() { return this.container.hidden } initializeEventListeners() { for (let t = 0; t < this.elements.length; t++)this.elements[t].addEventListener("mouseenter", (() => { this.elementsVisible[t] && this.elementMouseenter(t) })), this.elements[t].addEventListener("mouseleave", (() => { this.elementsVisible[t] && this.elementMouseleave(t) })), this.elements[t].addEventListener("click", (() => { this.elementsVisible[t] && this.elementClick(t) })); this.previousButton.addEventListener("click", (() => { this.buttonsVisible[0] && this.previousButtonClick() })), this.backButton.addEventListener("mouseenter", (() => { this.buttonsVisible[1] && this.backButtonMouseenter() })), this.backButton.addEventListener("mouseleave", (() => { this.buttonsVisible[1] && this.backButtonMouseleave() })), this.backButton.addEventListener("click", (() => { this.buttonsVisible[1] && this.backButtonClick() })), this.nextButton.addEventListener("click", (() => { this.buttonsVisible[2] && this.nextButtonClick() })) } getItemListIndex(t) { return this.page * this.elements.length + t } changeItemList(t) { this.itemList = t } changePage(t) { this.page = t; for (let t = 0; t < this.elements.length; t++)this.getItemListIndex(t) < this.itemList.length ? (this.populateElement(t), this.showElement(t)) : this.hideElement(t); this.showHidePreviousNextButton() } reset() { this.page = 0, this.changePage(0) } show(t) { t && this.reset(), this.container.hidden = !1 } hide() { this.container.hidden = !0 } elementMouseenter(t) { } elementMouseleave(t) { } elementClick(t) { } showElement(t) { this.elementsVisible[t] = !0, this.elements[t].style.cursor = "pointer" } hideElement(t) { this.elementsVisible[t] = !1, this.elements[t].style.cursor = "default" } populateElement(t) { } backButtonMouseenter() { } backButtonMouseleave() { } hideBackButton() { this.buttonsVisible[1] = !1 } showBackButton() { this.buttonsVisible[1] = !0 } backButtonClick() { this.hide() } hidePreviousButton() { this.previousButton.style.cursor = "default", this.buttonsVisible[0] = !1 } showPreviousButton() { this.previousButton.style.cursor = "pointer", this.buttonsVisible[0] = !0 } previousButtonClick() { this.page > 0 && this.changePage(this.page - 1), this.showHidePreviousNextButton() } hideNextButton() { this.nextButton.style.cursor = "default", this.buttonsVisible[2] = !1 } showNextButton() { this.nextButton.style.cursor = "pointer", this.buttonsVisible[0] = !0 } nextButtonClick() { (this.page + 1) * this.elements.length < this.itemList.length && this.changePage(this.page + 1), this.showHidePreviousNextButton() } showHidePreviousNextButton() { this.page > 0 ? this.showPreviousButton() : this.hidePreviousButton(), (this.page + 1) * this.elements.length < this.itemList.length ? this.showNextButton() : this.hideNextButton() } } class S { constructor(t, e, s, i) { this.container = v(t), this.buttons = b(t + " > " + e), this.selected = 0, this.buttonsVisible = []; for (let t = 0; t < this.buttons.length; t++)this.buttonsVisible.push(!0); this.selectedStyle = s, this.defaultStyle = i, this.initializeEventListeners() } get hidden() { return this.container.hidden } set hidden(t) { this.container.hidden = t } initializeEventListeners() { for (let t = 0; t < this.buttons.length; t++)this.buttons[t].addEventListener("mouseenter", (() => { this.buttonsVisible[t] && this.buttonMouseenter(t) })), this.buttons[t].addEventListener("mouseleave", (() => { this.buttonsVisible[t] && this.buttonMouseleave(t) })), this.buttons[t].addEventListener("click", (() => { this.buttonsVisible[t] && this.buttonClick(t) })) } buttonMouseenter(t) { } buttonMouseleave(t) { } selectButton(t) { for (let t in this.selectedStyle); this.selected = t } buttonClick(t) { t != this.selected && this.selectButton(t) } showButton(t) { this.buttonsVisible[t] = !0 } hideButton(t) { this.buttonsVisible[t] = !1 } save() { return String(this.selected) } load(t, e) { return this.selected = 0 == Number(t[e]) ? 1 : 0, this.buttonClick(Number(t[e])), 1 } show() { this.container.hidden = !1 } hide() { this.container.hidden = !0 } } class N extends L { constructor(t, e, s, i, n, r) { super(), this.physical = t, this.magic = e, this.fire = s, this.water = i, this.wind = n, this.nature = r } } class P extends L { comparableTypes(t) { return this instanceof E && t instanceof E || this instanceof _ && t instanceof _ } finalType(t) { return t instanceof f } applyLogFunction(t, e) { if (this.comparableTypes(t) && t instanceof L) for (const s in this) { const i = this.get(s), n = t.get(s); if (!i[e](n)) return !1 } else { if (!this.finalType(t)) return !1; for (const s in this) if (!this.get(s)[e](t)) return !1 } return !0 } applyCompFunction(t, e, s, i = (() => !0)) { if (this.comparableTypes(t) && t instanceof L) for (const n in this) { const r = this.get(n), o = t.get(n); i(r, o) && s.set(n, r[e](o)) } else if (this.finalType(t)) for (const n in this) { const r = this.get(n); i(r, t) && s.set(n, r[e](t)) } return s } applyRedFunction(t, e, s = (() => !0)) { for (const i in this) s(this[i]) && (t = e(t, this[i])); return t } } class M { constructor(t = [], e = ["ar"], s = [new f(0)], i = new f(0)) { this.stopPoints = t, this.stopPoints.unshift(new f(0)), this.stopPoints.push(new f(1 / 0)), this.coefficients = s, this.coefficients.unshift(i), this.types = e, this.types.unshift("ar"), this.stopPointValues = [s[0]]; for (let s = 1; s < t.length; s++)"ar" == e[s] ? this.stopPointValues[s] = this.stopPointValues[s - 1].add(this.stopPoints[s].sub(this.stopPoints[s - 1]).mul(this.coefficients[s])) : "ge" == e[s] && (this.stopPointValues[s] = this.stopPointValues[s - 1].mul(this.stopPoints[s].sub(this.stopPoints[s - 1]).pow(this.coefficients[s]))) } getPrice(t, e) { let s = 0; for (; this.stopPoints[s].lte(t);)s++; let i = this.stopPointValues[s - 1], n = new f(0); for (; e.gt(new f(0));) { const r = t.add(e).gt(this.stopPoints[s]) ? this.stopPoints[s].sub(t) : e; "ar" == this.types[s] ? n = n.add(f.sumArithmeticSeries(r, i, this.coefficients[s], t.sub(this.stopPoints[s - 1]))) : "ge" == this.types[s] && (n = n.add(f.sumGeometricSeries(r, i, this.coefficients[s], t.sub(this.stopPoints[s - 1])))), i = this.stopPointValues[s], s++, e = e.sub(r), t = t.add(r) } return n } } class _ extends P { constructor(t = new f(0), e = new f(0), s = new f(0), i = new f(0), n = new f(0), r = new f(0)) { super(), this.physical = t, this.magic = e, this.fire = s, this.water = i, this.wind = n, this.nature = r } eq(t) { return this.applyLogFunction(t, "eq") } static eq(t, e) { return t.eq(e) } lt(t) { return this.applyLogFunction(t, "lt") } static lt(t, e) { return t.lt(e) } lte(t) { return this.applyLogFunction(t, "lte") } static lte(t, e) { return t.lte(e) } gt(t) { return !this.lte(t) } static gt(t, e) { return t.gt(e) } gte(t) { return !this.lt(t) } static gte(t, e) { return t.gte(e) } isNull() { return this.applyLogFunction(new f(1e-5), "lte") } add(t) { return this.applyCompFunction(t, "add", new E) } static add(t, e) { return t.add(e) } sub(t) { return this.applyCompFunction(t, "sub", new E) } static sub(t, e) { return t.sub(e) } mul(t) { return this.applyCompFunction(t, "mul", new E) } static mul(t, e) { return t.mul(e) } div(t) { return this.applyCompFunction(t, "div", new E, ((t, e) => !e.eq(new f(0)))) } static div(t, e) { return t.div(e) } getText() { let t = ""; if (this.isNull()) return "0"; for (const e in this) 0 != this[e] && (t += _.textStart + _.typeColor.get(e) + w(this.get(e)) + _.typeEnd.get(e) + "&nbsp"); return t } getPlainPower() { let t = new f(0); for (const e in this) t = t.add(this[e]); return t } } _.textStart = '<span style="color:', _.typeColor = new N('#c06000">', '#b000b0">', '#FF0000">', '#4848ff">', '#d0FFd0">', '#20d000">'), _.typeEnd = new N("&#x2BC0;</span>", "&#x2BC1;</span>", "&#x2BC5;</span>", "&#x2BC6;</span>", "&#x2BC7;</span>", "&#x2BC8;</span>"); class E extends P { constructor(t = [], e = []) { super(); for (let s = 0; s < t.length; s++)this.set(t[s], e[s]) } eq(t) { return this.applyLogFunction(t, "eq") } lt(t) { return this.applyLogFunction(t, "lt") } lte(t) { return this.applyLogFunction(t, "lte") } gt(t) { return !this.lte(t) } gte(t) { return !this.lt(t) } isNull() { return this.applyLogFunction(new f(1e-5), "lte") } add(t) { const e = new E([], []); return this.applyCompFunction(t, "add", e) } sub(t) { const e = new E([], []); return this.applyCompFunction(t, "sub", e) } mul(t) { const e = new E([], []); return this.applyCompFunction(t, "mul", e) } div(t) { const e = new E([], []); return this.applyCompFunction(t, "div", e, ((t, e) => !e.eq(new f(0)))) } getText(t = !1) { let e = ""; for (const s in this) { const i = this[s]; i instanceof E ? e += "<br>" + i.getText() + "<br>" : i instanceof _ ? i.isNull() && !t || (e += s + ":&nbsp" + i.getText() + "<br>") : i instanceof f && (i.neq_tolerance(0, 1e-5) || t) && (e += s + ":&nbsp" + w(i) + "<br>") } return e } getCompareText(t) { const e = this.add(t); let s = ""; for (const i in e) { const e = this.get(i), n = t.get(i); if (null == e) n instanceof E ? s += "<br>" + n.getCompareText(new E) : (s += i + ":&nbsp", s += n instanceof _ ? "0 &rightarrow; " + n.getText() : "0 &rightarrow; " + w(n)); else if (null == n) e instanceof E ? s += "<br>" + e.getCompareText(new E) : (s += i + ":&nbsp", s += e instanceof _ ? e.getText() + " &rightarrow; 0" : w(e) + " &rightarrow; 0"); else if (n instanceof E); else { s += i + ":&nbsp"; const t = '<span style="color:' + y(e, n) + '">  &rightarrow; </span>'; n instanceof _ || (s += w(e) + t + w(n)) } s += "<br>" } return s } getPlainPower(t = "Attack||Defense") { return this[t] instanceof _ ? this.get(t).getPlainPower() : new f(0) } getPower(t, e = "Attack||Defense", s = "Defense||Attack") { let i = new f(0); const n = this.get(e), r = t.get(s); return n ? (i = this.get(e).getPlainPower(), r ? (i = i.sub(r.physical), n.fire.gt(0) && (i = i.add(r.nature.abs().min(n.fire).mul(new f(.5))), r.wind.gt(0) && (i = i.sub(r.wind.min(n.fire).mul(new f(.5))))), n.nature.gt(0) && (i = i.add(r.water.abs().min(n.nature).mul(new f(.5))), r.wind.gt(0) && (i = i.sub(r.fire.min(n.nature).mul(new f(.5))))), n.water.gt(0) && (i = i.add(r.wind.abs().min(n.water).mul(new f(.5))), r.wind.gt(0) && (i = i.sub(r.nature.min(n.water).mul(new f(.5))))), n.wind.gt(0) && (i = i.add(r.fire.abs().min(n.wind).mul(new f(.5))), r.wind.gt(0) && (i = i.sub(r.water.min(n.wind).mul(new f(.5))))), i) : i) : i } } class C { constructor(t = "None", e = "None", s = new E, i = new E, n = new E, r = "Creature", o = new M) { this.name = t, this.desc = e, this.stats = s, this.requires = n, this.type = r, this.priceHandler = o, this._bodyParts = i } get bodyParts() { return this._bodyParts } getPrice(t, e) { return this.priceHandler.getPrice(t, e) } getCompareText(t) { return "Name: " + this.name + " → " + t.name + "<br>" + this.stats.getCompareText(t.stats) + (this.requires.isNull() ? "" : "<br>Requires:<br>" + this.requires.getCompareText(t.requires)) } getFullText() { return "<b>Name: " + this.name + "</b><br>" + this.stats.getText() + "<br>" + (this._bodyParts.isNull() ? "" : "Parts:<br>" + this.bodyParts.getText()) + (this.requires.isNull() ? "" : "Requires:<br>" + this.requires.getText()) + "<br><i>" + this.desc + "</i>" } getText() { return "<b>Name: " + this.name + "</b><br>" + this.stats.getText() + "<br>" + (this._bodyParts.isNull() ? "" : "Parts:<br>" + this.bodyParts.getText()) + "<br>" + (this.requires.isNull() ? "" : "Requires:<br>" + this.requires.getText()) + "<br><i>" + this.desc + "</i>" } } const I = { container: $("#PopupWindowContainer").get(0), left: -1e3, top: -1e3, show(t, e, s) { I.container.hidden = !1, I.container.innerHTML = s, I.move(t, e) }, move(t, e) { I.container.style.left = t + "5", I.container.style.top = e + "5", I.left = t, I.top = e }, hide() { I.container.hidden = !0 } }; class H { constructor(t, e) { this.name = t, this.nrPages = e } } class F extends x { constructor(t, e, s, i, n, r) { super(t, e, s, i, n, r) } hideElement(t) { super.hideElement(t), this.elements[t].innerHTML = "", this.elements[t].style.borderStyle = "none" } showElement(t) { super.showElement(t), this.elements[t].style.borderStyle = "solid" } elementClick(t) { q.startTutorial(q.tutorialList.elements[t].innerHTML, !1, "SettingsPage") } populateElement(t) { this.elements[t].innerHTML = this.itemList[this.getItemListIndex(t)] } backButtonClick() { q.exitTutorial() } hidePreviousButton() { super.hidePreviousButton(), this.previousButton.style.borderStyle = "none", this.previousButton.innerHTML = "" } showPreviousButton() { super.showPreviousButton(), this.previousButton.style.borderStyle = "solid", this.previousButton.innerHTML = "&lt;" } hideNextButton() { super.hideNextButton(), this.nextButton.style.borderStyle = "none", this.nextButton.innerHTML = "" } showNextButton() { super.showNextButton(), this.nextButton.style.borderStyle = "solid", this.nextButton.innerHTML = "&gt;" } show() { super.show(!0) } } const q = new class extends A { constructor(t) { super(t), this.isMandatory = !1, this.tutorialName = "", this.lastPage = "", this.currentEntry = 0, this.image = v(".tutorial_image.page_tutorial"), this.previousButton = v(".tutorial_previous_button.page_tutorial"), this.nextButton = v(".tutorial_next_button.page_tutorial"), this.unlockedTutorials = new Set, this.defaultTutorialPath = "./images/tutorial/", this.pageButtonsVisibility = !1, this.tutorialList = new F(".element_list.page_tutorial", ".element_list_item", ".element_list_prev_button", ".element_list_back_button", ".element_list_next_button", []), this.tutorials = { "Settings Page": new H("Settings Page", 1), "Army Page": new H("Army Page", 3), "Buy Creature Page": new H("Buy Creature Page", 2), "Buy Weapon Page": new H("Buy Weapon Page", 1), "Tower Page": new H("Tower Page", 3), "Boss Fighting Army Selection Page": new H("Boss Fighting Army Selection Page", 1), "Boss Fighting Page": new H("Boss Fighting Page", 1) }, this.initializeEventListeners() } initializeEventListeners() { this.previousButton.addEventListener("click", (() => { this.showPreviousEntry() })), this.nextButton.addEventListener("click", (() => { "Finish" == this.nextButton.innerHTML ? this.exitTutorial() : this.showNextEntry() })) } displayOnLoad() { } display() { this.tutorialList.changePage(0) } displayEveryTick() { } save() { let t = String(this.unlockedTutorials.size); for (let e of this.unlockedTutorials) t += "/*/" + e; return t } load(t) { const e = t.split("/*/"); let s = 0, i = 0, n = Number(e[s]); for (s++; i < n;)this.unlockedTutorials.add(e[s]), s++, i++; return s } unlockTutorial(t) { this.unlockedTutorials.add(t) } getTutorialImageName() { return this.defaultTutorialPath + this.tutorialName + String(this.currentEntry) + ".png" } setUpSelectionList() { this.tutorialList.changeItemList(Array.from(this.unlockedTutorials.values())), this.tutorialList.show() } setTutorialButtons() { 0 == this.currentEntry ? this.previousButton.hidden = !0 : this.previousButton.hidden = !1, this.currentEntry == this.tutorials[this.tutorialName].nrPages - 1 ? this.isMandatory ? this.nextButton.innerHTML = "Finish" : this.nextButton.hidden = !0 : (this.nextButton.hidden = !1, this.nextButton.innerHTML = "Next") } setUpTutorial(t, e, s) { this.lastPage = s, this.isMandatory = e, this.tutorialName = t, e ? this.tutorialList.hide() : this.setUpSelectionList(), "None" != t ? (this.image.parentElement.hidden = !1, this.currentEntry = 0, this.image.setAttribute("src", this.getTutorialImageName()), this.setTutorialButtons()) : this.image.parentElement.hidden = !0 } startTutorial(t, e, s) { this.pageButtonsVisibility = v("#PageButtonsContainer").hidden, this.setUpTutorial(t, e, s), v("#PageButtonsContainer").hidden = !0, e ? _t.hidePages("TutorialPage") : this.pageButtonsVisibility = !1 } showPreviousEntry() { this.currentEntry--, this.image.setAttribute("src", this.getTutorialImageName()), this.setTutorialButtons() } showNextEntry() { this.currentEntry++, this.image.setAttribute("src", this.getTutorialImageName()), this.setTutorialButtons() } exitTutorial() { v("#PageButtonsContainer").hidden = this.pageButtonsVisibility, this.isMandatory && this.tutorialList.hide(), _t.hidePages(this.lastPage) } }("TutorialPage"), z = new class extends A { constructor(t) { super(t), this.timesVisited = 0, this.nrArmies = 3, this.nrArmySelects = 3, this.armySelects = []; for (let t = 0; t < this.nrArmies; t++)this.armySelects.push(new et(".toggle_button_container.page_boss_select_army", ".toggle_button", { borderColor: "var(--selected-toggle-button-border-color)" }, { borderColor: "var(--default-toggle-button-border-color)" }, t)); this.armyInfos = $(".select_boss_army_info").toArray(), this.bossInfo = $("#BossInfo").get(0), this.difficultyGauge = $("#BossFightDifficultyGauge").get(0), this.fight = void 0, this.backButton = $("#BackFromBossArmySelectionPage").get(0), this.startFightButton = $("#StartBossFightButton").get(0), this.initializeEventListeners() } initializeEventListeners() { this.startFightButton.addEventListener("click", (() => { W.reset(), W.fight = this.fight; for (let t = 0; t < this.fight.maxSelectibleArmies; t++)-1 != this.fight.selectedArmies[t] && null != j.Tower.removeRaidedLevelByArmy(this.fight.selectedArmies[t]) && W.armiesRemovedFrom.push(); this.reset(), _t.hidePages("BossFightingPage") })), this.backButton.addEventListener("click", (() => { $("#PageButtonsContainer").show(), $("#PageTopResourcesContainer").show(), _t.hidePages("TowerPage") })) } displayOnLoad() { } display() { for (let t = 0; t < this.fight.maxSelectibleArmies; t++)this.armySelects[t].container.parentElement.hidden = !1, this.armySelects[t].deselect(); for (let t = this.fight.maxSelectibleArmies; t < this.nrArmySelects; t++)this.armySelects[t].container.parentElement.hidden = !0; this.bossInfo.innerHTML = st.bosses[this.fight.bosses[0]].getText(), 0 == this.timesVisited && (q.unlockTutorial("Boss Fighting Army Selection Page"), q.startTutorial("Boss Fighting Army Selection Page", !0, "BossArmySelectionPage")), this.timesVisited++ } save() { return super.save() } load(t) { const e = t.split("/*/"); return super.load(e) } showHideFightButton() { for (const t in this.fight.selectedArmies) if (-1 != this.fight.selectedArmies[t] && "None" != Mt.armies[this.fight.selectedArmies[t]].creature) return void (this.startFightButton.hidden = !1); this.startFightButton.hidden = !0 } reset() { this.startFightButton.hidden = !0; for (let t = 0; t < this.fight.maxSelectibleArmies; t++)this.armySelects[t].selectButton(this.fight.selectedArmies[t]), this.armyInfos[t].innerHTML = "No army to be seen here." } }("BossArmySelectionPage"); class R { constructor(t, e, s, i, n, r, o, a, h, l) { this.width = t, this.height = e, this.top = s, this.left = i, this.capacity = r, this.raidingArmy = l, this.name = a, this.desc = h, this.zIndex = n, this.unlocks = o, this.unlockedNextLevels = !1 } } class U extends R { constructor(t, e, s, i, n, r, o, a, h = [], l = "", u = "", c = -1) { super(t, e, s, i, n, o, h, l, u, c), this.goldPerPower = a, this.stats = r, this.type = "Raid" } get goldPerSecond() { return Mt.armies[this.raidingArmy].size.min(this.capacity).mul(this.goldPerPower).mul(Mt.armies[this.raidingArmy].stats.getPower(this.stats, "Attack", "Defense")).max(new f(0)) } getColor() { const t = this.stats.getPower(Mt.armies[j.currentArmy].stats, "Defense", "Attack"); return Mt.armies[j.currentArmy].stats.getPower(this.stats, "Attack", "Defense").lt(t) ? "var(--disabled-tower-level-background-color)" : "var(--default-tower-level-background-color)" } tick(t) { Mt.gold = Mt.gold.add(this.goldPerSecond.div(t)) } getText(t) { return "<b>" + t + " - " + this.name + "</b><br><i>Type: " + this.type + "</i><br>Raided by: " + (-1 == this.raidingArmy ? "None" : this.raidingArmy + 1) + "<br>Defense: " + this.stats.get("Defense").getText() + "<br>Capacity: " + w(this.capacity, !0) + "<br>Gold per power: " + w(this.goldPerPower) + "<br>Current gold per second: " + (-1 == this.raidingArmy ? "None" : w(this.goldPerSecond)) + "<br><br><i>" + this.desc + "</i>" } raid(t) { const e = this.stats.getPower(Mt.armies[j.currentArmy].stats, "Defense", "Attack"), s = Mt.armies[j.currentArmy].stats.getPower(this.stats, "Attack", "Defense"); let i = -1; if (!e.lte(s)) return !1; if (this.raidingArmy == j.currentArmy ? (this.raidingArmy = -1, Mt.armies[j.currentArmy].raiding = -1, j.Tower.removeRaidedLevel(j.Tower.currentFloor, t), i = t) : (-1 != Mt.armies[j.currentArmy].raiding && (i = j.Tower.removeRaidedLevelByArmy(j.currentArmy)[1]), -1 != this.raidingArmy ? j.Tower.changeRaidedLevel(j.Tower.currentFloor, t, j.currentArmy) : j.Tower.addRaidedLevel(j.Tower.currentFloor, t, j.currentArmy), this.raidingArmy = j.currentArmy, Mt.armies[j.currentArmy].raiding = t), !this.unlockedNextLevels) { for (let t = 0; t < this.unlocks.length; t++) { const e = this.unlocks[t]; e[0] == j.Tower.currentFloor && (j.towerLevels[e[1]].hidden = !1) } this.unlockedNextLevels = !0 } return i } } class V extends R { constructor(t, e, s, i, n, r, o, a, h = [], l = "", u = "", c = -1) { super(t, e, s, i, n, o, h, l, u, c), this.rewards = a, this.boss = r } get type() { return st.bosses[this.boss].type } get stats() { return st.bosses[this.boss].stats } getColor() { const t = st.bosses[this.boss].stats.getPower(Mt.armies[j.currentArmy].stats, "Defense", "Attack"); return Mt.armies[j.currentArmy].stats.getPower(st.bosses[this.boss].stats, "Attack", "Defense").lt(t) ? "var(--disabled-tower-level-background-color)" : "var(--default-tower-level-background-color)" } getText(t) { return "<b>" + t + " - " + this.name + "</b><br><i>Type: " + this.type + "</i><br><br>" + st.bosses[this.boss].name + "<br>" + st.bosses[this.boss].stats.getText() + "<br><i>" + st.bosses[this.boss].desc + "</i><br><br>Capacity:" + w(this.capacity, !0) + "<br><br><i>" + this.desc + "</i>" } tick() { } raid(t) { return v("#PageButtonsContainer").hidden = !0, v("#PageTopResourcesContainer").hidden = !0, z.fight = new k([this.boss], 1, !1), _t.hidePages("BossArmySelectionPage"), !1 } } class D { constructor(t = [], e = "", s = "", i = []) { this.levels = t, this.name = e, this.desc = s, this.raidedLevels = i } getText() { return "<b>" + this.name + "</b><br><br><i>" + this.desc + "</i>" } } class O { constructor() { this.floors = [], this.raidedLevels = [], this.currentFloor = 0, this.initializeFloors() } initializeFloors() { this.floors[0] = new D([new U(100, 50, 500, 100, 0, new E(["Defense"], [new _(new f(.5))]), new f(500), new f(1), [[0, 1], [0, 2]], "Sewers 1", "Still laughing, you go inside the building only to realize that the stink is even worse than what you thought it would be. Now you start to feel sorry for the guy who tried to organize a date here. <br> Going one step further, you find yourselves in knee-high dirty water hoping that the situation will change for the better in the next few minutes."), new U(100, 50, 449, 49, 3, new E(["Defense"], [new _(new f(1))]), new f(250), new f(2), [[0, 3], [0, 4]], "Sewers 2", "You took the trapdoor on the left side of the first level. The stench is no better, but at least some new strange moss is inhabiting the left wall."), new U(100, 50, 449, 151, 3, new E(["Defense"], [new _(new f(1))]), new f(250), new f(2), [[0, 3], [0, 5]], "Sewers 3", "You took the trapdoor on the right side of the first level. The stench is no better, but at least some new strange moss is inhabiting the right wall."), new U(120, 50, 423, 115, 2, new E(["Defense"], [new _(new f(3.4))]), new f(450), new f(15), [[0, 6]], "Sewers 4", "After taking one door to the back, you find yourself in a moss-filled place. Instead of the wetness of water, you are greeted with the slimeiness of... well, of slime."), new U(30, 50, 385, 75, 3, new E(["Defense"], [new _(new f(2))]), new f(600), new f(5), [[1, 0]], "Sewers 5", "Another trapdoor in the left portion of the ceiling, who would've guessed? At least the place is not wet anymore and... well, it's way hotter and the stink is worse... You got comfort for your legs, but at what price?"), new U(30, 50, 385, 229, 3, new E(["Defense"], [new _(new f(2))]), new f(600), new f(5), [[1, 0]], "Sewers 6", "Another trapdoor in the right portion of the ceiling, who would've guessed? At least the place is not wet anymore and... well, it's way hotter and the stink is worse... You got comfort for your legs, but at what price?"), new U(80, 50, 397, 162, 1, new E(["Defense"], [new _(new f(5.5))]), new f(900), new f(37), [[0, 7]], "Sewers 7", "The slime coating becomes more consistent, sticky and concentrated. Surprising no one, this is even more unconfortable than it was."), new U(30, 70, 300, 220, 0, new E(["Defense"], [new _(new f(9.5))]), new f(1200), new f(87), [[0, 8]], "Sewers 8", "The stink intensifies to an unheard-of level when you enter the room. The slime pools on the ground, knee-high in places, ankle high in others. It is dripping from the ceiling as well, along from the edges of the spiral staircase leading ever upwards. Some railing would come in handy, but you can't get everything in life..."), new V(30, 70, 230, 220, 0, "Slime", new f(1200), new f(40), [], "Sewer's Top", "The topmost level of the sewers. It is lit with candles. Due to the slight topwards incline and the slight upwards arc of the floor, the slime is only running in two rivers next to the walls.  You don't want to find out what lurks in the shadows, but will have to do so eventually...")], "Sewers", "Wet and stinky and the odor gets worse the higher you go. Before the entrance stands a lone sign: 'EXTREME DANGER OF DEATH (also not an ideal place for a date, trust me)'"), this.floors[1] = new D([new U(100, 50, 300, 100, 0, new E(["Defense"], [new _(new f(5))]), new f(300), new f(2), [], "The Slums", "When you venture beyond the sewers, the place looks like a big slum, full of giant rats.")], "Rat-haven", "A place where the rats thrive.") } getGoldPerSecond() { let t = new f(0); for (let e = 0; e < j.Tower.raidedLevels.length; e++)t = t.add(j.Tower.floors[j.Tower.raidedLevels[e][0]].levels[j.Tower.raidedLevels[e][1]].goldPerSecond); return t } removeRaidedLevel(t, e) { let s; for (let i = 0; i < this.raidedLevels.length; i++)if (this.raidedLevels[i][0] == t && this.raidedLevels[i][1] == e) { s = this.raidedLevels.splice(i, 1)[0]; break } null != s && (this.floors[s[0]].levels[s[1]].raidingArmy = -1) } removeRaidedLevelByArmy(t) { let e; for (let s = 0; s < this.raidedLevels.length; s++)if (this.raidedLevels[s][2] == t) { e = this.raidedLevels.splice(s, 1)[0]; break } return null != e && (this.floors[e[0]].levels[e[1]].raidingArmy = -1), e } addRaidedLevel(t, e, s) { this.raidedLevels.push([t, e, s]) } changeRaidedLevel(t, e, s) { for (let i = 0; i < this.raidedLevels.length; i++)if (this.raidedLevels[i][0] == t && this.raidedLevels[i][1] == e) { this.raidedLevels[i][2] = s; break } } save() { let t = String(this.currentFloor); t += "/*/" + String(this.raidedLevels.length); for (let e = 0; e < this.raidedLevels.length; e++)t += "/*/" + this.raidedLevels[e][0] + "/*/" + this.raidedLevels[e][1] + "/*/" + this.raidedLevels[e][2]; return t } load(t, e) { this.currentFloor = Number(t[e]), e++; const s = Number(t[e]); e++; for (let i = 0; i < s; i++, e += 3)this.addRaidedLevel(Number(t[e]), Number(t[e + 1]), Number(t[e + 2])); return e } } class G extends S { constructor(t, e, s, i) { super(t, e, s, i) } buttonClick(t) { super.buttonClick(t), j.changeArmy(t) } } const j = new class extends A { constructor(t) { super(t), this.towerFloors = b(".tower_part"), this.towerLevels = b(".tower_level"), this.towerInfo = v("#TowerPageTowerInfo"), this.pageButton = v("#TowerPageButton"), this.armyInfo = v("#TowerPageArmyInfo"); let e = 0, s = this.towerFloors.length; for (; e < s;) [this.towerFloors[e], this.towerFloors[s]] = [this.towerFloors[s], this.towerFloors[e]], e++, s--; this.towerFloors.shift(), this.towerLevels, this.towerInfo, this.pageButton, this.changeArmyButtons = new G(".toggle_button_container.page_tower", ".toggle_button", { borderColor: "var(--selected-toggle-button-border-color)" }, { borderColor: "var(--default-toggle-button-border-color)" }), this.currentArmy = 0, this.armyInfo, this.Tower = new O, this.initializeEventListeners() } initializeEventListeners() { for (let t = 0; t < this.towerFloors.length; t++)t >= this.Tower.floors.length ? (this.towerFloors[t].style.cursor = "default", this.towerFloors[t].addEventListener("mouseenter", (() => { this.towerInfo.innerHTML = "Under developement, sorry. :<)" }))) : (this.towerFloors[t].addEventListener("mouseenter", (() => { this.displayFloor(t), t != this.Tower.currentFloor ? this.towerFloors[t].style.backgroundColor = "var(--hover-tower-floor-background-color)" : this.towerFloors[t].style.backgroundColor = "var(--hover-selected-tower-floor-background-color)" })), this.towerFloors[t].addEventListener("click", (() => { this.towerFloors[this.Tower.currentFloor].style.background = "var(--default-tower-floor-background-color)", this.Tower.currentFloor = t, this.towerFloors[t].style.background = "var(--selected-tower-floor-background-color)" }))), this.towerFloors[t].addEventListener("mouseleave", (() => { this.displayFloor(this.Tower.currentFloor), t != this.Tower.currentFloor ? this.towerFloors[t].style.backgroundColor = "var(--default-tower-floor-background-color)" : this.towerFloors[t].style.backgroundColor = "var(--selected-tower-floor-background-color)" })); for (let t = 0; t < this.towerLevels.length; t++)this.towerLevels[t].addEventListener("mouseenter", (() => { this.displayLevelText(this.Tower.currentFloor, t) })), this.towerLevels[t].addEventListener("mouseleave", (() => { this.displayFloorText() })), this.towerLevels[t].addEventListener("click", (() => { const e = this.Tower.floors[this.Tower.currentFloor].levels[t].raid(t); !1 !== e && (-1 != e && this.displayLevel(this.Tower.currentFloor, e), this.displayLevel(this.Tower.currentFloor, t), this.displayLevelText(this.Tower.currentFloor, t)) })), this.towerLevels[t].setAttribute("contenttext", "") } displayOnLoad() { this.towerFloors[this.Tower.currentFloor].style.backgroundColor = "var(--selected-tower-floor-background-color)"; for (let t = 0; t < this.Tower.raidedLevels.length; t++) { const e = this.Tower.raidedLevels[t]; this.towerLevels[e[1]].setAttribute("contenttext", this.Tower.floors[e[0]].levels[e[1]].raidingArmy + 1) } } display() { this.changeArmy(this.currentArmy), this.displayFloor(this.Tower.currentFloor), 0 == this.timesVisited && (q.unlockTutorial("Tower Page"), q.startTutorial("Tower Page", !0, "TowerPage")), this.timesVisited++ } displayEveryTick() { } save() { let t = super.save(); return t += "/*/" + this.currentArmy + "/*/", t += this.Tower.save(), t += "/*/" + this.changeArmyButtons.save(), t } load(t) { const e = t.split("/*/"); let s = super.load(e) || 0; return this.currentArmy = Number(e[s]), s++, s = this.Tower.load(e, s), s += this.changeArmyButtons.load(e, s), this.displayOnLoad(), s } changeArmy(t) { this.currentArmy = t, this.armyInfo.innerHTML = Mt.armies[this.currentArmy].getText(!0), this.displayFloor(this.Tower.currentFloor) } displayFloor(t) { let e = this.Tower.floors[t].levels.length; for (; e < this.towerLevels.length;)this.towerLevels[e].hidden = !0, e++; for (e = 0; e < this.Tower.floors[t].levels.length;)this.towerLevels[e].hidden = !1, e++; for (e = 0; e < this.Tower.floors[t].levels.length;)this.displayLevel(t, e), e++; this.displayFloorText() } displayFloorText() { this.towerInfo.innerHTML = this.Tower.floors[this.Tower.currentFloor].getText() } displayLevel(t, e) { const s = this.Tower.floors[t].levels[e], i = -1 == s.raidingArmy ? " " : String(s.raidingArmy + 1), n = this.towerLevels[e]; n.setAttribute("contenttext", i), n.innerHTML = i, n.style.background = s.getColor(), n.style.width = s.width, n.style.height = s.height, n.style.top = s.top, n.style.left = s.left, n.style.zIndex = s.zIndex } displayLevelText(t, e) { const s = this.Tower.floors[t].levels[e]; this.towerInfo.innerHTML = s.getText(this.Tower.floors[this.Tower.currentFloor].name, t, e) } }("TowerPage"), W = new class extends A { constructor(t) { super(t), this.feedElements = [], this.fightingArmies = [], this.fightingBosses = [], this.fightingArmyStatuses = [], this.fightingBossStatuses = [], this.timesVisited = 0, this.fight = void 0, this.barWidth = 300, this.nrArmyStatusBars = 3, this.barElementsPerArmy = 6, this.armyStatusBars = []; let e = $(".army_in_boss_fight_bar").toArray(); for (let t = 0; t < this.nrArmyStatusBars; t++) { this.armyStatusBars.push([]); for (let s = 0; s < this.barElementsPerArmy; s++)this.armyStatusBars[t].push(e[t * this.barElementsPerArmy + s]) } this.nrBossStatusBats = 1, this.barElementsPerBoss = 6, this.bossStatusBars = [], e = $(".boss_in_boss_fight_bar").toArray(); for (let t = 0; t < this.nrBossStatusBats; t++) { this.bossStatusBars.push([]); for (let s = 0; s < this.barElementsPerBoss; s++)this.bossStatusBars[t].push(e[t * this.barElementsPerBoss + s]) } this.feedElements = [], this.feedMoves = [], this.feedElements = $(".boss_fight_move_feedElement").toArray(), this.fightingArmies = [], this.fightingBosses = [], this.fightingArmyStatuses = [], this.fightingBossStatuses = [], this.fightingArmiesNr = 0, this.fightingBossesNr = 0, this.armiesRemovedFrom = [], this.initializeEventListeners() } initializeEventListeners() { for (let t = 0; t < this.feedElements.length; t++)this.feedElements[t].addEventListener("mouseenter", (e => { if ("" != this.feedElements[t].innerHTML && (I.left != e.clientX || I.top != e.clientY)) { const s = this.feedMoves[this.feedMoves.length - 1 - t]; I.show(e.clientX, e.clientY, s[0].moveset.getMove_description(...s[1])) } })), this.feedElements[t].addEventListener("mousemove", (e => { const s = this.feedMoves[this.feedMoves.length - 1 - t]; I.show(e.clientX, e.clientY, s[0].moveset.getMove_description(...s[1])) })), this.feedElements[t].addEventListener("mouseleave", (() => { I.hide() })) } displayOnLoad() { } display() { if (0 == this.timesVisited) q.unlockTutorial("Boss Fighting Page"), q.startTutorial("Boss Fighting Page", !0, "BossFightingPage"); else { for (let t = 0; t < this.fight.maxSelectibleArmies; t++)this.armyStatusBars[t][0].parentElement.parentElement.hidden = !1, this.fightingArmies.push(new Q(Mt.armies[this.fight.selectedArmies[t]])), this.fightingArmyStatuses.push(1); this.fightingArmiesNr = this.fight.maxSelectibleArmies; for (let t = this.fight.maxSelectibleArmies; t < this.nrArmyStatusBars; t++)this.armyStatusBars[t][0].parentElement.parentElement.hidden = !0, this.fightingBossStatuses.push(1); this.fightingBossesNr = 1, this.fightingBosses.push(new tt(st.bosses[this.fight.bosses[0]])), this.deployArmies(), $(".boss_in_boss_fight_name").get(0).innerHTML = this.fight.bosses[0] } this.timesVisited++ } displayEveryTick() { for (let t = 0; t < this.fightingArmies.length; t++)this.armyStatusBars[t][0].style.width = this.getWidth(this.fightingArmies[t].totalHealth, this.fightingArmies[t].maxTotalHealth) + "", this.armyStatusBars[t][1].innerHTML = w(this.fightingArmies[t].totalHealth) + "/" + w(this.fightingArmies[t].maxTotalHealth), this.armyStatusBars[t][2].style.width = this.getWidth(this.fightingArmies[t].units, this.fightingArmies[t].maxUnits) + "", this.armyStatusBars[t][3].innerHTML = w(this.fightingArmies[t].units, !0) + "/" + w(this.fightingArmies[t].maxUnits, !0) + " (" + w(this.fightingArmies[t].deployed, !0) + ")", this.armyStatusBars[t][4].style.width = this.getWidth(this.fightingArmies[t].attackCounter, this.fightingArmies[t].attackTime) + "", this.armyStatusBars[t][5].innerHTML = w(this.fightingArmies[t].getTotalAttack(this.fightingBosses[0])); for (let t = 0; t < this.fightingBosses.length; t++)this.bossStatusBars[t][0].style.width = this.getWidth(this.fightingBosses[t].totalHealth, this.fightingBosses[t].maxTotalHealth) + "", this.bossStatusBars[t][1].innerHTML = w(this.fightingBosses[t].totalHealth) + "/" + w(this.fightingBosses[t].maxTotalHealth), this.bossStatusBars[t][2].style.width = this.getWidth(this.fightingBosses[t].units, this.fightingBosses[t].maxUnits) + "", this.bossStatusBars[t][3].innerHTML = w(this.fightingBosses[t].units, !0) + "/" + w(this.fightingBosses[t].maxUnits, !0), this.bossStatusBars[t][4].style.width = this.getWidth(this.fightingBosses[t].attackCounter, this.fightingBosses[t].attackTime) + "", this.bossStatusBars[t][5].innerHTML = w(this.fightingBosses[t].getTotalAttack()); this.doFight() && this.resolve_win() } save() { return super.save() } load(t) { const e = t.split("/*/"); return super.load(e) } deployArmies() { for (let t = 0; t < this.fightingArmies.length; t++)this.fightingArmies[t].deploy_around_boss(this.fightingBosses[0]); this.fightingBosses[0].getTargets() } getWidth(t, e) { return new f(this.barWidth).mul(t.div(e)).floor().toNumber() } doFight() { for (let t = 0; t < this.fightingArmies.length; t++)if (1 == this.fightingArmyStatuses[t] && (this.fightingArmies[t].tick(20, this.fightingBosses[0]), this.fightingArmies[t].totalHealth.lte(1e-5) && (this.fightingArmyStatuses[t] = 0, this.fightingArmies[t].totalHealth = new f(0), this.fightingArmiesNr -= 1, 0 == this.fightingArmiesNr))) return !0; for (let t = 0; t < this.fightingBosses.length; t++)if (1 == this.fightingBossStatuses[t] && (this.fightingBosses[t].tick(20), this.fightingBosses[t].totalHealth.lte(1e-5) && (this.fightingBossStatuses[t] = 0, this.fightingBosses[t].totalHealth = new f(0), this.fightingBossesNr -= 1, 0 == this.fightingBossesNr))) return !0 } resolve_win() { for (let t = 0; t < this.armiesRemovedFrom.length; t++)j.Tower.raidedLevels.push(this.armiesRemovedFrom[t]); _t.hidePages("BossFightingResultPage") } update_feed() { let t, e = this.feedMoves.length - 1; for (t = 0; t < this.feedMoves.length; t++, e--)this.feedElements[e].innerHTML = "<br>" + this.feedMoves[t][0].moveset.getMoveName(...this.feedMoves[t][1]) + "<br>"; for (; t < this.feedElements.length; t++)this.feedElements[t].innerHTML = "" } reset() { this.fightingArmies = [], this.fightingArmiesNr = 0, this.fightingBosses = [], this.fightingBossesNr = 0, this.fightingArmyStatuses = [], this.fightingBossStatuses = [], this.armiesRemovedFrom = [], this.feedMoves = [], this.update_feed() } }("BossFightingPage"); class Y { constructor(t, e) { this.name = t, this.desc = e } modifyStats(t) { return t } } class X extends Y { constructor(t, e, s = [], i = [], n = new f(1)) { super(t, e), this.modifiers = s, this.modifierTypes = i, this.attackTargets = n } modifyStats(t) { t = t.add(new E([], [])); for (let e = 0; e < this.modifierTypes.length; e++) { const s = t.get("Attack").get(this.modifierTypes[e]); t.set("Attack", s(this.modifiers[e])) } return t.set("Attack", t.get("Attack")), t } } class K extends Y { constructor(t, e, s = [], i = [], n = new f(1)) { super(t, e), this.modifiers = s, this.modifierTypes = i, this.defenseTargets = n } modifyStats(t) { t = t.add(new E([], [])); for (let e = 0; e < this.modifierTypes.length; e++) { const s = t.get("Defense").get(this.modifierTypes[e]); t.set("Defense", s(this.modifiers[e])) } return t } } class J { constructor(t = [[]]) { this.moves = t, this.currentMove = void 0, this.currentMovePlace = [-1, -1] } getMove() { const t = this.moves.length - 1 - Math.floor(Math.log2(1 + Math.floor(Math.random() * (2 ** this.moves.length - 1)))), e = Math.floor(Math.random() * this.moves[t].length); return this.currentMove = this.moves[t][e], this.currentMovePlace = [t, e], this.currentMove } getCurrentMoveName() { return this.getMoveName(...this.currentMovePlace) } getMoveName(t, e) { return J.nameTextStart + J.rarityColors[t] + J.colorSpanEnd + this.moves[t][e].name + " (" + J.moveRarities[t] + ")" + J.nameTextEnd } getMove_description(t, e) { return this.moves[t][e].desc } } J.nameTextStart = '<span style="color:', J.moveRarities = { 0: "Common", 1: "Uncommon", 2: "Rare", 3: "Special", 4: "Super", 5: "Ultra" }, J.rarityColors = { 0: "aliceblue", 1: "#20d000", 2: "#4848ff", 3: "#b000b0", 4: "#FF0000", 5: "#FF0000" }, J.colorSpanEnd = '">', J.nameTextEnd = "</span>"; class Q { constructor(t) { this.stats = t.stats.add(new E([], [])), this.maxUnits = new f(t.size), this.units = new f(t.size), this.maxTotalHealth = this.units.mul(this.stats.get("Health")), this.totalHealth = this.units.mul(this.stats.get("Health")), this.attackTime = new f(1), this.attackCounter = new f(0), this.size = 10, this.deployed = new f(0) } getTotalAttack(t) { return this.deployed.mul(this.stats.getPower(t.currentStats, "Attack", "Defense")).max(new f(0)) } doAttack(t) { t.getAttacked(this.getTotalAttack(t)) } tick(t, e) { this.attackCounter = this.attackCounter.add(new f(1).div(t)), this.attackCounter.gte(this.attackTime) && (this.attackCounter = new f(0), this.doAttack(e)) } deploy_around_boss(t) { const e = new f(t.getNrAround(this.size)); for (; e.gt(this.deployed) && this.units.gt(this.deployed);)t.deployUnitAround(this), this.deployed = this.deployed.add(1) } } class Z { constructor(t) { this.army = t, this.stats = t.stats.add(new E([], [])), this.isDead = !1 } lose_health(t) { const e = this.stats.get("Health").min(t); this.stats.set("Health", this.stats.get("Health").sub(e)), this.army.totalHealth = this.army.totalHealth.sub(e), this.stats.get("Health").lte(new f(1e-5)) && this.die() } die() { this.army.units = this.army.units.sub(1), this.army.deployed = this.army.deployed.sub(1), this.isDead = !0 } } class tt { constructor(t) { this.stats = t.stats.add(new E([], [])), this.maxUnits = new f(1), this.units = new f(1), this.maxTotalHealth = this.units.mul(this.stats.get("Health")), this.totalHealth = this.units.mul(this.stats.get("Health")), this.attackTime = new f(1), this.attackCounter = new f(0), this.floatingDamage = new f(0), this.moveset = t.moveset, this.move = void 0, this.currentStats = void 0, this.size = t.size, this.enemiesAround = [], this.targets = [], this.chooseMove() } getTargets() { var t; if (this.targets = [], 0 != this.enemiesAround.length && (null === (t = this.move) || void 0 === t ? void 0 : t.attackTargets)) for (let t = 0; this.move.attackTargets.lte(t); t++) { const t = Math.floor(Math.random() * this.enemiesAround.length); this.targets.push(t) } } chooseMove() { this.move = this.moveset.getMove(), this.currentStats = this.move.modifyStats(this.stats), this.getTargets() } getTotalAttack() { let t = new f(0); for (let e = 0; e < this.targets.length; e++)t = t.add(this.currentStats.getPower(this.enemiesAround[this.targets[e]].stats, "Attack", "Defense").max(new f(0))); return t } doAttack() { const t = []; for (let e = 0; e < this.targets.length; e++) { const s = this.enemiesAround[this.targets[e]]; if (s.isDead) continue; const i = this.currentStats.getPower(s.stats, "Attack", "Defense"); s.lose_health(i), s.isDead && (t.push(this.targets[e]), s.army.deploy_around_boss(this)) } let e = 0; for (; e < this.enemiesAround.length;)this.enemiesAround[e].isDead ? this.enemiesAround.splice(e, 1) : e++; W.feedMoves.push([this, this.moveset.currentMovePlace]), W.feedMoves.length > W.feedElements.length && W.feedMoves.shift(), W.update_feed(), this.chooseMove(), this.currentStats = this.move.modifyStats(this.stats) } tick(t) { this.attackCounter = this.attackCounter.add(new f(1).div(t)), this.attackCounter.gte(this.attackTime) && (this.attackCounter = new f(0), this.doAttack()) } getAttacked(t) { this.totalHealth = this.totalHealth.sub(t), this.floatingDamage = this.floatingDamage.add(t); const e = this.floatingDamage.div(this.stats.get("Health")).floor(); this.floatingDamage.gte(this.stats.get("Health")) && (this.units = this.units.sub(e), this.floatingDamage = this.floatingDamage.sub(e.mul(this.stats.get("Health")))) } getNrAround(t) { function e(t, e) { const s = (t - 2) / (2 * t) * Math.PI; return Math.cos(s) / (1 - Math.cos(s)) >= e } t /= this.size; let s, i = 2, n = 10 * this.size, r = Math.floor((n + i) / 2); for (; !e(r, t);)if (n = r, r = Math.floor((n + i) / 2), 2 == r) return 2; for (; e(r, t);)s = r, i = r, r = Math.floor((n + i) / 2); return s } deployUnitAround(t) { this.enemiesAround.push(new Z(t)) } } class et extends S { constructor(t, e, s, i, n) { super(t += ".n" + String(n), e, s, i), this.number = n, this.selected = -1 } showButton(t) { super.showButton(t), this.buttons[t].hidden = !1 } hideButton(t) { super.hideButton(t), this.buttons[t].hidden = !0 } deselect() { if (-1 != this.selected) { for (const t in this.defaultStyle); this.selected = -1 } } buttonClick(t) { if (-1 != z.fight.selectedArmies[this.number]) for (let e = 0; e < z.nrArmySelects; e++)this.number != e && z.armySelects[e].showButton(t); if (t == this.selected) z.fight.selectedArmies[this.number] = -1, z.armyInfos[this.number].innerHTML = "No army to be seen here."; else { z.fight.selectedArmies[this.number] = t, z.armyInfos[this.number].innerHTML = Mt.armies[t].getFightingStatsText(); for (let e = 0; e < z.nrArmySelects; e++)e != this.number && z.armySelects[e].hideButton(t) } if (this.selected == t) this.deselect(); else { if (-1 != this.selected) for (const t in this.defaultStyle); this.selectButton(t) } z.showHideFightButton() } } const st = { weapons: { None: new C, Knife: new C("Knife", "A thrustworthy knife, even if it is not the best for your needs. Simple to use and reliable.", new E(["Attack"], [new _(new f(1))]), new E(["Hands"], [new f(-1)]), new E([], []), "Weapon", new M([new f(100), new f(200), new f(1e3)], ["ar", "ar", "ar", "ge"], [new f(1), new f(10), new f(250), new f(1.05)], new f(25))), Dagger: new C("Dagger", "A bit better than a knife, but pricier too.", new E(["Attack"], [new _(new f(1.2))]), new E(["Hands"], [new f(-1)]), new E([], []), "Weapon", new M([new f(100), new f(300), new f(1e3)], ["ar", "ar", "ar", "ge"], [new f(2), new f(15), new f(450), new f(1.07)], new f(150))), Longsword: new C("Longsword", "A twohanded sword, strong against unarmored opponents", new E(["Attack"], [new _(new f(2.5))]), new E(["Hands"], [new f(-2)]), new E(["Attack"], [new _(new f(1.1))]), "Weapon", new M([new f(90), new f(270), new f(900)], ["ar", "ar", "ar", "ge"], [new f(5), new f(25), new f(1e3), new f(1.1)], new f(500))) }, creatures: { None: new C, Human: new C("Human", "A cheap and reliable worker. Not too efficient, but this is the best you will get for your money.", new E(["Health", "Attack"], [new f(10), new _(new f(1))]), new E(["Hands"], [new f(2)]), new E([], []), "Creature", new M([new f(4), new f(100), new f(500)], ["ar", "ar", "ar", "ar"], [new f(0), new f(1), new f(10), new f(100)], new f(5))) }, bosses: { Slime: new class { constructor(t, e, s, i, n, r) { this.stats = s, this.name = t, this.desc = e, this.type = i, this.soldierLossRatio = n, this.attaksPerSecond = 1, this.size = 100, this.moveset = r } attack() { return this.stats.get("Attack") } getText() { let t = "<b>" + this.name + "</b><br><i>" + this.type + "</i><br><br>" + this.stats.getText() + "<br>Attacks/sec: " + this.attaksPerSecond + "<br>Size: " + this.size + "<br>Moves: "; for (let e = 0; e < this.moveset.moves.length; e++)for (let s = 0; s < this.moveset.moves[e].length; s++)0 == e && 0 == s || (t += ", "), t += this.moveset.getMoveName(e, s); return t += ".<br>", t } }("Slime", "A giant slime with a giant ego. He is the guardian of the exit of the first floor.", new E(["Attack", "Defense", "Health"], [new _(new f(90)), new _(new f(25)), new f(1e4)]), "Mini", new f(0), new J([[new X("Basic Attack", "A normal attack from a normal enemy.(Attack x1, , Targets: 1)", [new f(1)], ["mul"]), new X("Basic Double Attack", "A normal attack from a normal enemy targeting two beings at once.(Attack x1, , Targets: 2)", [new f(1)], ["mul"], new f(2))], [new X("Triple Attack", "A normal attack from a normal enemy targeting three beings at once.(Attack x1, , Targets: 3)", [new f(1)], ["mul"], new f(3)), new class extends Y { constructor(t, e, s = []) { super(t, e), this.moves = s, this.attackTargets = new f(0), this.defenseTargets = new f(0); for (let t = 0; t < this.moves.length; t++)this.moves[t] instanceof X ? this.attackTargets = this.attackTargets.add(this.moves[t].attackTargets) : this.moves[t] instanceof K && (this.defenseTargets = this.defenseTargets.add(this.moves[t].defenseTargets)) } modifyStats(t) { for (let e = 0; e < this.moves.length; e++)t = this.moves[e].modifyStats(t); return t } }("Attack and Defend", "The enemy takes a stance where defending and attacking is easier.(Attack and Defense x2, Targets: 2)", [new X("", "", [new f(2)], ["mul"], new f(2)), new K("", "", [new f(2)], ["mul"])])], [new X("Fife-Fold Attack", "The slime empowers itself, then attacks five enemies at once with slightly increased prowess (Attack x1, Targets: 5).", [new f(1)], ["mul"], new f(5))]])) } }; class it extends S { constructor(t, e, s, i) { super(t, e, s, i) } buttonClick(t) { super.buttonClick(t), rt.changeArmy(t) } } class nt extends x { constructor(t, e, s, i, n, r = []) { super(t, e, s, i, n, r), this.type = "creatures", this.changeIndex = 0 } hideElement(t) { super.hideElement(t), this.elements[t].innerHTML = "", this.elements[t].style.borderStyle = "none" } showElement(t) { super.showElement(t), this.elements[t].style.borderStyle = "solid" } elementMouseenter(t) { "None" == this.itemList[t] ? rt.partInfo.innerHTML = "None" : rt.partInfo.innerHTML = st[this.type][this.itemList[t]].getText(), rt.info.innerHTML = Mt.armies[rt.currentArmy].getChangeText(this.type, this.itemList[t], this.changeIndex) } elementMouseleave(t) { rt.partInfo.innerHTML = "", rt.info.innerHTML = Mt.armies[rt.currentArmy].getText() } elementClick(t) { if (Mt.armies[rt.currentArmy].changeElement(this.type, this.elements[t].innerHTML, this.changeIndex, !0, rt.currentArmy)) { if (rt.info.innerHTML = Mt.armies[rt.currentArmy].getText(), rt.selectRows[this.type][this.changeIndex][1].innerHTML = this.elements[t].innerHTML, "creatures" == this.type) { for (let t = Mt.armies[rt.currentArmy].weapons.length - 1; t > -1; t--)rt.selectRows.weapons[t][0].parentElement.hidden = !0, rt.selectRows.weapons[t][1].innerHTML = "None"; "None" != rt.selectRows.creatures[0][1].innerHTML && (rt.selectRows.weapons[0][0].parentElement.hidden = !1) } else if ("weapons" == this.type) { let t = !1; for (let e = 0; e < Mt.armies[rt.currentArmy].weapons.length; e++)"None" == Mt.armies[rt.currentArmy].weapons[e] && (t ? rt.selectRows.weapons[e][0].parentElement.hidden = !0 : (t = !0, rt.selectRows.weapons[e][0].parentElement.hidden = !1)), rt.selectRows.weapons[e][1].innerHTML = Mt.armies[rt.currentArmy].weapons[e] } this.container.hidden = !0, rt.armyManagerContainer.hidden = !1 } } populateElement(t) { this.elements[t].innerHTML = this.itemList[this.getItemListIndex(t)] } backButtonMouseenter() { rt.partInfo.innerHTML = "Take me back, baby!" } backButtonMouseleave() { rt.partInfo.innerHTML = "" } backButtonClick() { this.hide(), rt.armyManagerContainer.hidden = !1 } hidePreviousButton() { super.hidePreviousButton(), this.previousButton.style.borderStyle = "none", this.previousButton.innerHTML = "" } showPreviousButton() { super.showPreviousButton(), this.previousButton.style.borderStyle = "solid", this.previousButton.innerHTML = "&lt;" } hideNextButton() { super.hideNextButton(), this.nextButton.style.borderStyle = "none", this.nextButton.innerHTML = "" } showNextButton() { super.showNextButton(), this.nextButton.style.borderStyle = "solid", this.nextButton.innerHTML = "&gt;" } changeType(t) { this.type = t } changeSelection(t, e) { this.changeType(t), this.changeItemList(e) } show() { super.show(!0), rt.armyManagerContainer.hidden = !0 } } const rt = new class extends A { constructor(t) { super(t), this.currentArmy = 0, this.armySizeInput = v("#ArmySizeInput"), this.partInfo = v("#ArmyPagePartInfo"), this.info = v("#ArmyPageInfo"), this.armyManagerContainer = v(".army_management_container"), this.pageButton = v("#ArmyPageButton"), this.maxArmySizeButton = v("#MaxArmySize"), this.levelText = v("#ArmyLevelText"), this.levelUpButton = v("#ArmyLevelUpButton"), this.levelUpCost = v("#ArmyLevelUpCost"), this.timesVisited = 0, this.selectRows = { creatures: [], weapons: [] }, this.selectRowsTypes = ["creatures", "weapons"], this.selectRowsNrs = [1, 9]; const e = b(".nr_available_div.page_army"), s = b(".complementary_button.page_army"); let i = 0, n = this.selectRowsTypes[i]; for (let t = 0; t < e.length; t++)t >= this.selectRowsNrs[i] && (i++, n = this.selectRowsTypes[i]), this.selectRows[n].push([e[t], s[t]]); this.elementEquipState = { creatures: { None: 0, Human: 0 }, weapons: { None: 0 } }, this.changeArmyButtons = new it(".select_subpage_container.page_army", ".select_button", { borderColor: "var(--selected-toggle-button-border-color)" }, { borderColor: "var(--default-toggle-button-border-color)" }), this.elementSelectList = new nt(".element_list.page_army", ".element_list_item", ".element_list_prev_button", ".element_list_back_button", ".element_list_next_button", []), this.currentSelecting = { weapons: -1 }, this.initializeEventListeners() } initializeEventListeners() { for (const t in this.selectRows) if ("creatures" == t) this.selectRows.creatures[0][1].addEventListener("click", (() => { this.elementSelectList.hidden ? (this.elementSelectList.changeType(t), this.elementSelectList.changeItemList(this.generateItemList(t, this.currentArmy)), this.elementSelectList.changeIndex = 0, this.elementSelectList.show()) : this.selectRows.creatures[0][1].innerHTML = Mt.armies[this.currentArmy].creature })), this.selectRows.creatures[0][1].addEventListener("mouseenter", (() => { this.partInfo.innerHTML = st.creatures[Mt.armies[this.currentArmy].creature].getText() })), this.selectRows.creatures[0][1].addEventListener("mouseleave", (() => { this.partInfo.innerHTML = "" })); else if ("weapons" == t) for (let e = 0; e < 8; e++)this.selectRows[t][e][1].addEventListener("click", (() => { this.elementSelectList.hidden ? (this.elementSelectList.changeType(t), this.elementSelectList.changeItemList(this.generateItemList(t, this.currentArmy)), this.elementSelectList.changeIndex = e, this.elementSelectList.show()) : this.selectRows.weapons[e][1].innerHTML = Mt.armies[this.currentArmy].weapons[e] })), this.selectRows[t][e][1].addEventListener("mouseenter", (() => { this.partInfo.innerHTML = st.weapons[Mt.armies[this.currentArmy].weapons[e]].getText() })), this.selectRows[t][e][1].addEventListener("mouseleave", (() => { this.partInfo.innerHTML = "" })); this.armySizeInput.addEventListener("change", (() => { Mt.armies[this.currentArmy].setSize(new f(this.armySizeInput.value)) })), this.maxArmySizeButton.addEventListener("click", (() => { Mt.armies[this.currentArmy].setSize(new f(1 / 0)) })), this.levelUpButton.addEventListener("mouseenter", (() => { Mt.armies[this.currentArmy].level < St.levelPrices.length && (this.info.innerHTML = Mt.armies[this.currentArmy].getLevelUpText(), this.partInfo.innerHTML = Mt.armies[this.currentArmy].getCompareLevelText(), this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1) + '<span style="color:' + y(Mt.armies[this.currentArmy].level, Mt.armies[this.currentArmy].level + 1) + '"> &rightarrow; </span>' + (Mt.armies[this.currentArmy].level + 2) + "<br>") })), this.levelUpButton.addEventListener("mouseleave", (() => { this.info.innerHTML = Mt.armies[this.currentArmy].getText(), this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1) + (Mt.armies[this.currentArmy].level >= St.levelPrices.length ? " (Max)" : ""), this.partInfo.innerHTML = "" })), this.levelUpButton.addEventListener("click", (() => { Mt.armies[this.currentArmy].levelUp(), this.info.innerHTML = Mt.armies[this.currentArmy].getText(), this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1), Mt.armies[this.currentArmy].level < St.levelPrices.length ? (this.info.innerHTML = Mt.armies[this.currentArmy].getLevelUpText(), this.partInfo.innerHTML = Mt.armies[this.currentArmy].getCompareLevelText(), this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1) + '<span style="color:' + y(Mt.armies[this.currentArmy].level, Mt.armies[this.currentArmy].level + 1) + '">  &rightarrow; </span>' + (Mt.armies[this.currentArmy].level + 2) + "<br>", this.levelUpCost.innerHTML = "Cost: " + w(St.levelPrices[Mt.armies[this.currentArmy].level])) : (this.partInfo.innerHTML = "", this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1) + " (Max)", this.levelUpButton.hidden = !0, v("#ArmyLevelUpCost").hidden = !0) })) } displayOnLoad() { this.info.innerHTML = Mt.armies[this.currentArmy].getText(), this.armySizeInput.value = w(Mt.armies[this.currentArmy].size, !0) } display() { 0 == this.timesVisited && (q.unlockTutorial("Army Page"), q.startTutorial("Army Page", !0, "ArmyPage")), this.timesVisited++ } displayEveryTick() { this.selectRows.creatures[0][0].innerHTML = "None" == Mt.armies[this.currentArmy].creature ? "(&infin;)" : "(" + w(Mt.inventory.creatures[Mt.armies[this.currentArmy].creature], !0) + ")"; for (let t = 0; t < 8; t++)this.selectRows.weapons[t][0].innerHTML = "None" == Mt.armies[this.currentArmy].weapons[t] ? "(&infin;)" : "(" + w(Mt.inventory.weapons[Mt.armies[this.currentArmy].weapons[t]], !0) + ")" } save() { let t = super.save(); t += "/*/" + this.currentArmy, t += "/*/" + Object.keys(this.elementEquipState).length; for (const [e, s] of Object.entries(this.elementEquipState)) { t += "/*/" + Object.keys(s).length + "/*/" + e; for (const [e, i] of Object.entries(s)) t += "/*/" + e + "/*/" + i } return t += "/*/" + this.changeArmyButtons.save(), t } load(t) { const e = t.split("/*/"); let s, i, n = super.load(e) || 0; this.currentArmy = Number(e[n]), n++, s = Number(e[n]), n++; for (let t = 0; t < s; t++) { i = Number(e[n]), n++; const t = e[n]; n++; for (let s = 0; s < i; s++)this.elementEquipState[t][e[n]] = Number(e[n + 1]), n += 2 } return n += this.changeArmyButtons.load(e, n), this.displayOnLoad(), n } changeArmy(t) { this.selectRows.creatures[0][1].innerHTML = Mt.armies[t].creature; let e = 0; for (; e < 8 && "None" != Mt.armies[this.currentArmy].weapons[e];)this.selectRows.weapons[e][1].innerHTML = "None", e++; for (e = 0, this.currentArmy = t; e < 8 && "None" != Mt.armies[this.currentArmy].weapons[e];)this.selectRows.weapons[e][0].parentElement.hidden = !1, this.selectRows.weapons[e][1].innerHTML = Mt.armies[this.currentArmy].weapons[e], e++; for (e < Mt.armies[this.currentArmy].maxWeapons && "None" != Mt.armies[this.currentArmy].creature && (this.selectRows.weapons[e][0].parentElement.hidden = !1, e++); e < Mt.armies[this.currentArmy].maxWeapons;)this.selectRows.weapons[e][0].parentElement.hidden = !0, e++; this.info.innerHTML = Mt.armies[t].getText(), this.armySizeInput.value = w(Mt.armies[t].size, !0), this.levelText.innerHTML = "Level: " + (Mt.armies[this.currentArmy].level + 1), Mt.armies[this.currentArmy].level < St.levelPrices.length ? (this.levelUpCost.innerHTML = "Cost: " + w(St.levelPrices[Mt.armies[this.currentArmy].level]), this.levelUpButton.hidden = !1, v("#ArmyLevelUpCost").hidden = !1) : (this.levelText.innerHTML += " (Max)", this.levelUpButton.hidden = !0, v("#ArmyLevelUpCost").hidden = !0), this.elementSelectList.hidden || (this.elementSelectList.container.hidden = !0, this.armyManagerContainer.hidden = !1) } equipElementByArmy(t, e, s) { if ("None" != e) { const i = 2 ** s; null == this.elementEquipState[t][e] && this.elementEquipState[t][e], this.elementEquipState[t][e] += i } } deequipElementByArmy(t, e, s) { if ("None" != e) { const i = 2 ** s; this.elementEquipState[t][e] -= i } } isElementEquippedByArmy(t, e, s) { const i = 2 ** s; return 1 == Math.floor(this.elementEquipState[t][e] / i) } generateItemList(t, e) { const s = []; for (const i of Object.keys(this.elementEquipState[t])) this.isElementEquippedByArmy(t, i, e) || s.push(i); return s } }("ArmyPage"); class ot extends S { constructor(t, e, s, i) { super(t, e, s, i) } showButton(t) { super.showButton(t), this.buttons[t].hidden = !1 } hideButton(t) { super.hideButton(t), this.buttons[t].hidden = !0 } buttonClick(t) { super.buttonClick(t), _t.hidePages(this.buttons[t].getAttribute("page")) } } const at = new class { constructor() { this.resourceContainer = v("#PageTopResourcesContainer"), this.pageButtons = new ot("#AllPageButtons", ".page_button", { borderColor: "var(--selected-page-button-border-color)" }, { borderColor: "var(--default-page-button-border-color)" }) } }; class ht { constructor(t, e, s = "gold", i = new f(0)) { this.borderColors = { gold: "gold" }, this.type = t, this.name = e, this.nrBought = i, this.currency = s } buy(t) { const e = st[this.type][this.name].getPrice(this.nrBought, t), s = Mt.get(this.currency); return !!s.gte(e) && (Mt.set(this.currency, s.sub(e)), Mt.inventory[this.type][this.name] || (rt.elementEquipState[this.type][this.name] = 0, Mt.inventory[this.type][this.name] = new f(0)), Mt.inventory[this.type][this.name] = Mt.inventory[this.type][this.name].add(t), this.nrBought = this.nrBought.add(t), xt.addToStatistics(["StorePage", this.type, this.name], t) && dt.itemList.changePage(dt.itemList.page), !0) } getPrice(t) { return st[this.type][this.name].getPrice(this.nrBought, t) } } class lt extends x { constructor(t, e, s, i, n, r = []) { super(t, e, s, i, n, r), this.buyerRows = [], this.type = "creatures"; const o = b(".nr_name_button_container.page_store > .nr_available_div"), a = b(".nr_name_button_container.page_store > .element_name_div"), h = b(".nr_name_button_container.page_store > .complementary_button"); for (let t = 0; t < o.length; t++)this.buyerRows.push([o[t], a[t], h[t]]); this.backButton.style.cursor = "default", this.backButton.style.borderStyle = "none", this.backButton.innerHTML = "", this.initializeEventListenersChild() } initializeEventListenersChild() { for (let t = 0; t < this.buyerRows.length; t++)this.buyerRows[t][2].addEventListener("click", (() => { dt.buyers[dt.type][t].buy(dt.buyNumberValues[dt.currentBuyNumberButton[this.type]]) && this.populateElement(t) })) } hideElement(t) { super.hideElement(t), this.elements[t].hidden = !0 } showElement(t) { super.showElement(t), this.elements[t].hidden = !1, this.elements[t].style.cursor = "default" } elementMouseenter(t) { dt.infoText.innerHTML = st[dt.type][dt.buyers[this.type][t].name].getText() } elementMouseleave(t) { dt.infoText.innerHTML = "" } populateElement(t) { const e = this.itemList[this.getItemListIndex(t)].name; this.buyerRows[t][1].innerHTML = e; const s = Mt.inventory[this.type][e]; this.buyerRows[t][0].innerHTML = s ? "(" + w(s, !0) + ")" : "(0)", this.buyerRows[t][2].innerHTML = w(this.itemList[this.getItemListIndex(t)].getPrice(dt.buyNumberValues[dt.currentBuyNumberButton[this.type]])) } hidePreviousButton() { super.hidePreviousButton(), this.previousButton.style.borderStyle = "none", this.previousButton.innerHTML = "" } showPreviousButton() { super.showPreviousButton(), this.previousButton.style.borderStyle = "solid", this.previousButton.innerHTML = "&lt;" } hideNextButton() { super.hideNextButton(), this.nextButton.style.borderStyle = "none", this.nextButton.innerHTML = "" } showNextButton() { super.showNextButton(), this.nextButton.style.borderStyle = "solid", this.nextButton.innerHTML = "&gt;" } changeType(t) { this.type = t } changeSelection(t, e) { this.changeType(t), this.changeItemList(e) } changeItemList(t) { throw new Error("Method not implemented.") } } class ut extends S { constructor(t, e, s, i) { super(t, e, s, i) } showButton(t) { super.showButton(t), this.buttons[t].hidden = !1 } hideButton(t) { super.hideButton(t), this.buttons[t].hidden = !0 } buttonClick(t) { super.buttonClick(t), dt.changeSubpage(dt.subpageTypes[t]) } } class ct extends S { constructor(t, e, s, i) { super(t, e, s, i) } buttonClick(t) { super.buttonClick(t), dt.currentBuyNumberButton[dt.type] = t, dt.display() } } const dt = new class extends A { constructor(t) { super(t), this.buyers = { creatures: [new ht("creatures", "Human")], weapons: [new ht("weapons", "Knife")] }, this.pageButton = document.querySelector("#StorePageButton"), this.subpageTypes = ["creatures", "weapons"], this.buyNumberValues = [new f(1), new f(10), new f(100), new f(1e3)], this.currentBuyNumberButton = { creatures: 0, weapons: 0 }, this.infoText = document.querySelector("#StorePageInfo"), this.type = "creatures", this.itemList = new lt(".nr_name_button_flex_container.page_store", ".nr_name_button_container", ".element_list_prev_button", ".element_list_back_button", ".element_list_next_button", this.buyers[this.type]), this.subpageButtons = new ut("#StoreSubpageButtons", ".select_button", { borderColor: "var(--selected-toggle-button-border-color)" }, { borderColor: "var(--default-toggle-button-border-color)" }), this.buyNumberButtons = new ct(".toggle_button_container.page_store", ".toggle_button", { borderColor: "var(--selected-toggle-button-border-color)" }, { borderColor: "var(--default-toggle-button-border-color)" }), this.initializeEventListeners() } initializeEventListeners() { } displayOnLoad() { this.buyNumberButtons.selectButton(this.currentBuyNumberButton[this.type]), this.itemList.changeItemList(this.buyers[this.type]) } display() { this.buyNumberButtons.selectButton(this.currentBuyNumberButton[this.type]), 0 == this.timesVisited && (q.unlockTutorial("Buy Creature Page"), q.startTutorial("Buy Creature Page", !0, "StorePage")), this.timesVisited++, this.itemList.show(), this.itemList.changePage(this.itemList.page) } displayEveryTick() { } save() { let t = super.save(); t += "/*/" + String(Object.keys(this.buyers).length); for (const e of Object.keys(this.buyers)) { t += "/*/" + e + "/*/" + this.currentBuyNumberButton[e], t += "/*/" + String(this.buyers[e].length); for (let s = 0; s < this.buyers[e].length; s++)t += "/*/" + this.buyers[e][s].nrBought } return t += "/*/" + this.subpageButtons.save(), t += "/*/" + this.buyNumberButtons.save(), t } load(t) { const e = t.split("/*/"); let s = super.load(e) || 0; const i = Number(e[s]); s++; for (let t = 0; t < i; t++) { const t = e[s]; s++, this.currentBuyNumberButton[t] = Number(e[s]), s++; const i = Number(e[s]); s++; for (let n = 0; n < i; n++)this.buyers[t][n].nrBought = new f(e[s]), s++ } return s += this.subpageButtons.load(e, s), s += this.buyNumberButtons.load(e, s), s } changeSubpage(t) { this.type = t, this.itemList.changeSelection(this.type, this.buyers[this.type]), this.itemList.show(!0), this.buyNumberButtons.buttonClick(this.currentBuyNumberButton[this.type]) } }("StorePage"); class mt { constructor(t) { this.N = t } countTrueConditions(t) { let e = 0; for (let s = 0; s < t.length; s++)e += Number(t[s].canUnlock()); return e } canUnlock(t) { return !0 } } class gt extends mt { constructor() { super(0) } canUnlock(t) { return this.countTrueConditions(t) == t.length } } class pt { constructor(t) { this.quantity = t, this.conditionCode = -1 } canUnlock() { return !!this.quantity.lte(xt.getStatistics(this.getPathInStatistics(), this.resetLevel)) } getPathInStatistics() { return [] } lt(t) { return this.quantity.lt(t.quantity) } lte(t) { return this.quantity.lte(t.quantity) } gt(t) { return this.quantity.gt(t.quantity) } gte(t) { return this.quantity.gte(t.quantity) } } class ft extends pt { constructor(t) { super(t) } get resetLevel() { return "overall" } get acronym() { return "O" } } class yt extends ft { constructor(t, e, s) { super(s), this.type = t, this.category = e } getPathInStatistics() { return ["StorePage", this.type, this.category] } } class wt { constructor(t, e) { this.conditions = t, this.unlocked = !1, this.conditionLogic = e } canUnlock() { return this.conditionLogic.canUnlock(this.conditions) } doUnlock(t = !0) { if (t && !this.unlocked) { if (this.canUnlock()) return this.unlock(), !0; this.lock() } return !1 } unlock() { this.unlocked = !0 } lock() { this.unlocked = !1 } } class bt extends wt { constructor(t, e, s, i) { super(t, e), this.buttonGroup = s, this.buttonNr = i } unlock() { super.unlock(), this.buttonGroup.showButton(this.buttonNr) } lock() { super.lock(), this.buttonGroup.hideButton(this.buttonNr) } } class vt extends wt { constructor(t, e, s) { super(t, e), this.buyer = s } unlock() { super.unlock(), dt.buyers[this.buyer.type].push(this.buyer) } lock() { super.lock(); for (let t = 0; t < dt.buyers[this.buyer.type]; t++)dt.buyers[this.buyer.type][t].name == this.buyer.name && dt.buyers[this.buyer.type].splice(t, 1) } } const Tt = { creatures: [], weapons: [new vt([new yt("weapons", "Knife", new f(35))], new gt, new ht("weapons", "Dagger")), new vt([new yt("weapons", "Dagger", new f(35))], new gt, new ht("weapons", "Longsword"))], pages: [new bt([new yt("creatures", "Human", new f(5))], new gt, at.pageButtons, 1), new bt([new class extends ft { constructor(t, e, s) { super(t), this.army = e, this.stat = s } getPathInStatistics() { return ["Player", "armies", this.army, this.stat] } }(new f(1), "all", "Attack")], new gt, at.pageButtons, 0), new bt([new yt("creatures", "Human", new f(15))], new gt, dt.subpageButtons, 1)], towerFloors: [], towerLevels: [] }; class Bt { constructor(t) { this.unlocks = [], this.index = 0, this.conditionCode = t } get type() { return "UnlockHandlerEntryClass" } doUnlock(t = !0) { let e = !0, s = !1; for (; this.index < this.unlocks.length && e;)e = this.unlocks[this.index].doUnlock(t), e && (this.index++, s = !0); return s } push(t) { this.unlocks.push(t) } sort() { this.unlocks.sort(((t, e) => { let s, i; for (let e of t.conditions) if (e.conditionCode == this.conditionCode) { s = e; break } for (let t of e.conditions) if (t.conditionCode == this.conditionCode) { i = t; break } const n = s.quantity.sub(i.quantity); return n.lt_tolerance(0, 1e-5) ? -1 : n.eq_tolerance(0, 1e-5) ? 0 : 1 })) } load(t) { let e = 0; for (; e < t; e++)this.unlocks[e].unlocked || this.unlocks[e].unlock(); for (; e < this.unlocks.length; e++)this.unlocks[e].unlocked && this.unlocks[e].lock(); this.index = t } } class Lt { constructor() { this.unlocks = {}, this.unlocks = {}, this.conditionCode = 0; for (let t of Object.values(Tt)) for (let e of t) for (let t of e.conditions) { let s = this.addElementToUnlocks(t.getPathInStatistics(), t.acronym, e); t.conditionCode = s } } get nextConditionCode() { return this.conditionCode++, this.conditionCode - 1 } addElementToUnlocks(t, e, s) { t.push(e); const i = T(t); return this.unlocks[i] || (this.unlocks[i] = new Bt(this.nextConditionCode)), this.unlocks[i].push(s), this.unlocks[i].conditionCode } getUnlockFromUnlocks(t, e) { return t.push(e), B(t, this.unlocks) } doUnlock(t) { for (let e of Lt.acronyms) { let s = this.getUnlockFromUnlocks(t, e); if (null != s) return s.doUnlock(!0) } } save() { let t = String(Object.keys(this.unlocks).length); for (let [e, s] of Object.entries(this.unlocks)) t += "/*/" + e + "/*/" + s.index; return t } load(t) { const e = t.split("/*/"); let s = 0, i = Number(e[s]); s++, this.unlocks; for (let t = 0; t < i; t++)this.unlocks[e[s]].load(Number(e[s + 1])), s += 2 } } Lt.acronyms = ["B", "O"]; const kt = new Lt; class At { constructor() { this.stats = [new f(0)], this.overall = new f(0) } get type() { return "StatisticClass" } add(t) { for (let e = 0; e < this.stats.length; e++)this.stats[e] = this.stats[e].add(t); this.overall = this.overall.add(t) } setToMax(t) { for (let e = 0; e < this.stats.length; e++)this.stats[e] = this.stats[e].max(t); this.overall = this.overall.max(t) } getStatistics(t) { return "overall" == t ? this.overall : this.stats[At.levelToIndex[t]] } reset(t) { let e = "overall" == t ? this.stats.length : At.levelToIndex[t] + 1; for (let t = 0; t < e; t++)this.stats[t] = new f(0); "overall" == t && (this.overall, new f(0)) } save() { let t = ""; for (let e = 0; e < this.stats.length; e++)t += this.stats[e] + "/*/"; return t += this.overall, t } load(t, e) { for (let s = 0; s < this.stats.length; s++)this.stats[s] = new f(t[e]), e++; return this.overall = new f(t[e]), ++e } } At.levelToIndex = { base: 0 }; const xt = new class { constructor() { this.stats = {}, this.buildStats() } setEnd(t, e) { for (const s in e) this.stats[t + s] = new At } buildStats() { let t = "StorePage"; for (const e in Object.keys(st)) { const s = e; for (const e in st[s]) { const i = t + "." + s + "." + e; this.stats[i] = new At } } t = "Player"; for (const e in [...Array(Mt.armies.length).keys(), "all"]) for (const s in ["Attack"]) { const i = t + ".armies." + e + "." + s; this.stats[i] = new At } t = "Tower"; let e = [9, 12]; for (let s = 0; s < 2; s++)for (let i = 0; i < e[s]; i++)for (let e in ["timesVisited"]) { const n = t + "." + s + "." + i + "." + e; this.stats[n] = new At } } addToStatistics(t, e) { return B(t, this.stats).add(e), kt.doUnlock(t) } setStatisticsToMax(t, e) { return B(t, this.stats).setToMax(e), kt.doUnlock(t) } getStatistics(t, e) { return B(t, this.stats).getStatistics(e) } save() { let t = String(Object.keys(this.stats).length); for (let [e, s] of Object.entries(this.stats)) t += "/*/" + e + "/*/" + s.save(); return t } load(t) { const e = t.split("/*/"); let s = 0, i = Number(e[s]); s++; let n = this.stats; for (let t = 0; t < i; t++)s = n[e[s]].load(e, s + 1); return s } }; class St { constructor(t = "None", e = ["None", "None", "None", "None", "None", "None", "None", "None"], s = new E, i = new E, n = new f(0)) { this.creatures = [t], this.weapons = e, this._stats = s, this._bodyParts = i, this._size = n, this.level = 0, this.level_bonus = new f(1), this.raiding = -1, this.power = new f(1) } get creature() { return this.creatures[0] } set creature(t) { this.creatures[0] = t } get stats() { return this._stats.mul(this.level_bonus) } set stats(t) { this._stats = t } get size() { return this._size } set size(t) { this._size = t } get bodyParts() { return this._bodyParts } set bodyParts(t) { this._bodyParts = t } get maxWeapons() { return 8 } levelUp() { this.level < St.levelPrices.length && St.levelPrices[this.level].lt(Mt.gold) && (Mt.gold = Mt.gold.sub(St.levelPrices[this.level]), this.levelUpHelper()) } levelUpHelper() { this.level++, this.level_bonus = this.level_bonus.mul(St.level_bonuses[this.level]) } levelDown(t) { for (; this.level > t;)this.level_bonus = this.level_bonus.div(St.level_bonuses[this.level]), this.level-- } getLevelUpText() { this.levelUpHelper(); const t = [this.size, this.stats, this.bodyParts]; return this.levelDown(this.level - 1), this.getCompareText(t) } getCompareLevelText() { return this.level >= St.level_bonuses.length ? "Max level reached, cannot upgrade further, sorry. :)" : "Power multiplier: " + w(this.level_bonus) + '<span style="color:' + y(this.level_bonus, this.level_bonus.mul(St.level_bonuses[this.level + 1])) + '"> &rightarrow; </span>' + w(this.level_bonus.mul(St.level_bonuses[this.level + 1])) } changeStats(t, e, s) { switch (t) { case "creatures": "None" != e ? (this._stats = st.creatures[e].stats.add(new E([], [])), this._bodyParts = st.creatures[e].bodyParts.add(new E([], []))) : (this.stats = this._stats.sub(st.creatures[this.creature].stats), this._bodyParts = this._bodyParts.sub(st[t][this.creature].bodyParts)); break; case "weapons": "None" != this[t][s] && (this._stats = this._stats.sub(st[t][this[t][s]].stats), this._bodyParts = this._bodyParts.sub(st[t][this[t][s]].bodyParts)), "None" != e && (this._stats = this._stats.add(st[t][e].stats), this._bodyParts = this._bodyParts.add(st[t][e].bodyParts)) } } changeElement(t, e, s = 0, i = !0, n) { switch (t) { case "creatures": this.setSize(new f(0)); for (let t = this.weapons.length - 1; t > -1; t--)this.changeElement("weapons", "None", t, i, n); this.changeStats(t, e, s), rt.deequipElementByArmy(t, this.creature, n), this.creature = e, rt.equipElementByArmy(t, e, n); break; case "weapons": if (!this.changeElementHelper("weapons", e, s, i, n)) return console.log("here"), !1 }return i && (xt.setStatisticsToMax(["Player", "armies", rt.currentArmy + "", "Attack"], this.stats.get("Attack").getPlainPower()), xt.setStatisticsToMax(["Player", "armies", "all", "Attack"], this.stats.get("Attack").getPlainPower())), !0 } canChangeElement(t, e, s) { if ("creatures" == t || "None" == e) return !0; { let i, n; return "None" != this[t][s] ? (this._stats = this._stats.sub(st[t][this[t][s]].stats), this._bodyParts = this._bodyParts.sub(st[t][this[t][s]].bodyParts), i = this.stats, n = this.bodyParts, this._stats = this._stats.add(st[t][this[t][s]].stats), this._bodyParts = this._bodyParts.add(st[t][this[t][s]].bodyParts)) : (i = this.stats, n = this.bodyParts), !!(n.add(st[t][e].bodyParts).gte(0) && st[t][e].requires.lte(i) && i.get("Health").gt(0)) } } changeElementHelper(t, e, s = 0, i = !0, n = 0) { if (!this.canChangeElement(t, e, s)) return !1; if ("None" != this[t][s] && (Mt.inventory[t][this[t][s]] = Mt.inventory[t][this[t][s]].add(this.size)), this.changeStats(t, e, s), rt.deequipElementByArmy(t, this[t][s], n), this[t][s] = e, rt.equipElementByArmy(t, e, n), "None" != e) Mt.inventory[t][e] = Mt.inventory[t][e].sub(this.size), this.size > Mt.inventory[t][e] && this.setSize(this.size.add(Mt.inventory[t][e])); else if ("None" == e && i) { let e = s; for (; e < this.maxWeapons - 1 && "None" != this[t][e + 1];)this[t][e] = this[t][e + 1], this[t][e + 1] = "None", e++ } return !0 } setSize(t) { if ("None" == this.creature || t.lt(new f(0))) return; let e = t.sub(this.size).min(Mt.inventory.creatures[this.creature]), s = 0; for (; "None" != this.weapons[s];)e = e.min(Mt.inventory.weapons[this.weapons[s]]), s++; for (this.size = e.add(this.size), Mt.inventory.creatures[this.creature] = Mt.inventory.creatures[this.creature].sub(e), s = 0; "None" != this.weapons[s];)Mt.inventory.weapons[this.weapons[s]] = Mt.inventory.weapons[this.weapons[s]].sub(e), s++; rt.armySizeInput.value = w(this.size, !0) } getStatsText() { return this.stats.getText() + "<br>" + this.bodyParts.getText(!0) } getChangeText(t, e, s = 0) { let i; if ("creatures" == t) { if ("None" == e) return "You would dismantle your army with this action."; i = this.creature } else i = this[t][s]; if (this.canChangeElement(t, e, s)) { let n; switch (t) { case "creatures": this.changeStats(t, e, s), this.creature = e, n = [this.size.min(Mt.inventory[t][e]), this.stats, this.bodyParts], this.changeStats(t, i, s), this.creature = i; break; case "weapons": this.changeStats(t, e, s), this[t][s] = e, n = [this.size.min(Mt.inventory[t][e]), this.stats, this.bodyParts], this.changeStats(t, i, s), this[t][s] = i }return this.getCompareText(n) } return "Cannot change this element of your army, sorry!" } getCompareText(t) { Array.isArray(t) || (t = [t.size, t.stats, t.bodyParts]); let e = "Size: " + w(this.size, !0) + '<span style="color:' + y(this.size, t[0]) + ';"> &rightarrow; </span>' + w(t[0], !0) + "<br>"; return e += this.stats.getCompareText(t[1]) + "<br>", e += this.bodyParts.getCompareText(t[2]), e } getText(t = !1) { if ("None" == this.creature) return "An army without a creature is nothing. You can't fight with it, nor do anything with it. Just sayin'. So please buy some creatures and make an army with them before anything else."; let e = ""; return 1 == t ? e = "Army size: " + w(this.size, !0) + "<br>" : e += "<br>", e += this.getStatsText() + "<br>", e } getFightingStatsText() { if ("None" == this.creature) return "No army to be seen here."; let t = ""; return t = "Army size: " + w(this.size, !0) + "<br>", t += "Collective health: " + w(this.size.mul(this.stats.get("Health")), !0) + "<br>", t += this.stats.getText(), t } save() { let t = this.creature + "/*/"; t += this.weapons.length; for (let e = 0; e < this.weapons.length; e++)t += "/*/" + this.weapons[e]; return t += "/*/" + this._size, t += "/*/" + this.raiding, t += "/*/" + this.level + "/*/" + this.level_bonus, t } load(t, e = 0, s = 0) { const i = t.split("/*/"); this.changeElement("creatures", i[e], 0, !1, s), e++; let n = Number(i[e]); e++; let r = 0; for (; n > 0;)this.changeStats("weapons", i[e], r), this.weapons[r] = i[e], n--, e++, r++; return this.size = new f(i[e]), e++, this.raiding = Number(i[e]), e++, this.level = Number(i[e]), e++, this.level_bonus = new f(i[e]), ++e } } St.level_bonuses = [new f(1), new f(1.1), new f(1.2), new f(1.3), new f(1.5), new f(1.7), new f(2)], St.levelPrices = [new f(1e3), new f(6e3), new f(15e3), new f(5e4), new f(175e3), new f("1e6")]; const Nt = new class extends A { constructor(t) { super(t), this.resultInfo = $("#AfterFightMessage").get(0), this.backButton = $("#BackButtonFromResults").get(0), this.initializeEventListeners() } initializeEventListeners() { this.backButton.addEventListener("click", (() => { $("#PageButtonsContainer").get(0).hidden = !1, $("#PageTopResourcesContainer").get(0).hidden = !1, _t.hidePages("TowerPage") })) } displayOnLoad() { } display() { this.resultInfo.innerHTML = this.generateMessage() } displayEveryTick() { } save() { return super.save() } load(t) { const e = t.split("/*/"); return super.load(e) } generateMessage() { var t, e; let s; return 0 == W.fightingArmiesNr ? (s = "You lost!<br>", (null === (t = W.fight) || void 0 === t ? void 0 : t.loseSoldiers) ? s += "With your loss, you lost all your soldiers as well!" : s += "Don't worry though, you didn't lose anyone, the magic of the Tower kept them all alive.") : (s = "You won!<br>", (null === (e = W.fight) || void 0 === e ? void 0 : e.loseSoldiers) ? s += "Though you lost part of your army." : s += 'Thank you for playing the game! <br> If you have a minute, I would really appreciate it if you could give me some feedback through <a href="https://forms.gle/rMwKTcsQJGxfFLDN8">a survey here</a> or in private.<br> Thank you for your time again!'), s } }("BossFightingResultPage"), Pt = new class extends A { constructor(t) { super(t), this.pageButton = v("#SettingsPageButton"), this.saveGameButton = v("#SaveGameButton"), this.loadGameButton = v("#LoadGameButton"), this.changeThemeButton = v("#ChangeTheme"), this.pageButton, this.saveGameButton, this.loadGameButton, this.changeThemeButton, this.colorThemes = { "Black Theme": [["--default-background-color", "rgb(14, 14, 15)"], ["--default-color", "rgb(240, 248, 255)"], ["--default-toggle-button-border-color", "rgb(255, 69, 0)"], ["--selected-toggle-button-border-color", "rgb(64, 00, 255)"], ["--default-button-border-color", "rgb(69,192,0)"], ["--default-tower-floor-background-color", "rgb(255, 255, 0)"], ["--hover-tower-floor-background-color", "rgb(214, 188, 40)"], ["--selected-tower-floor-background-color", "rgb(194, 146, 24)"], ["--hover-selected-tower-floor-background-color", "rgb(156, 116, 13)"], ["--default-tower-floor-color", "rgb(0, 0, 0)"], ["--default-tower-floor-border-color", "rgb(0, 0, 0)"], ["--default-tower-level-background-color", "rgb(222, 184, 135)"], ["--disabled-tower-level-background-color", "rgb(70, 66, 61)"], ["--default-selection-list-border-color", "rgb(128, 0, 128)"]], "Grey Theme": [["--default-background-color", "rgb(60, 60, 67)"], ["--default-color", "rgb(255, 255, 255)"], ["--default-toggle-button-border-color", "rgb(255, 55, 20)"], ["--selected-toggle-button-border-color", "rgb(53, 101, 202)"], ["--default-button-border-color", "rgb(102, 185, 53)"], ["--default-tower-floor-background-color", "rgb(218, 218, 37)"], ["--hover-tower-floor-background-color", "rgb(214, 188, 40)"], ["--selected-tower-floor-background-color", "rgb(194, 146, 24)"], ["--hover-selected-tower-floor-background-color", "rgb(156, 116, 13)"], ["--default-tower-floor-color", "rgb(0, 0, 0)"], ["--default-tower-floor-border-color", "rgb(24, 23, 32)"], ["--default-tower-level-background-color", "rgb(199, 156, 99)"], ["--disabled-tower-level-background-color", "rgb(54, 52, 49)"], ["--default-selection-list-border-color", "rgb(112, 5, 112)"]], "Dark Red Theme": [["--default-background-color", "rgb(35, 7, 9)"], ["--default-color", "rgb(168, 127, 52)"], ["--default-toggle-button-border-color", "rgb(252, 25, 25)"], ["--selected-toggle-button-border-color", "rgb(145, 76, 45)"], ["--default-button-border-color", "rgb(252, 25, 25)"], ["--default-tower-floor-background-color", "rgb(146, 0, 0)"], ["--hover-tower-floor-background-color", "rgb(110, 0, 0)"], ["--selected-tower-floor-background-color", "rgb(90, 9, 9)"], ["--hover-selected-tower-floor-background-color", "rgb(73, 9, 9)"], ["--default-tower-floor-color", "rgb(39, 1, 1)"], ["--default-tower-floor-border-color", "rgb(41, 0, 0)"], ["--default-tower-level-background-color", "rgb(184, 21, 62)"], ["--disabled-tower-level-background-color", "rgb(73, 27, 27)"], ["--default-selection-list-border-color", "rgb(128, 0, 128)"]] }, this.themeOrder = ["Black Theme", "Dark Red Theme"], this.currentTheme = -1, this.tutorialButton = document.querySelector("#SettingsPageTutorialButton"), this.initializeEventListeners() } initializeEventListeners() { this.changeThemeButton.addEventListener("click", (() => { this.changeTheme() })), this.saveGameButton.addEventListener("click", (() => { let t = Mt.save(); t += "*/*" + xt.save(), t += "*/*" + kt.save(); for (let e of Object.values(_t.pages)) t += "*/*" + e.save(); t += "*/*" + _t.currentPage, t += "*/*" + Date.now(), ((t, e = "GameSave", s = "text/plain") => { const i = document.createElement("a"), n = new Blob([t], { type: s }); i.href = URL.createObjectURL(n), i.download = e, i.click(), URL.revokeObjectURL(i.href) })(t) })), this.loadGameButton.addEventListener("input", (() => { if (_t.canSave = !1, this.loadGameButton.files) { let t = new FileReader; t.onload = () => { const e = t.result.split("*/*"); let s = 0; Mt.load(e[s]), s++, xt.load(e[s]), s++, kt.load(e[s]), s++; for (let t of Object.values(_t.pages)) t.load(e[s]), s++; _t.hidePages(e[s]), s++, _t.LoadOfflineProgress(Date.now() - Number(e[s])), s++ }, t.readAsText(this.loadGameButton.files[0]) } _t.canSave = !0 })), this.tutorialButton.addEventListener("click", (function () { q.startTutorial("None", !1, "SettingsPage"), _t.hidePages("TutorialPage") })), v("#ResetButton").addEventListener("click", (function () { _t.canSave = !1, localStorage.clear(), location.reload() })) } changeTheme() { this.currentTheme++, this.currentTheme == this.themeOrder.length && (this.currentTheme = 0), this.changeThemeButton.innerHTML = this.themeOrder[this.currentTheme]; for (let t = 0; t < this.colorThemes[this.themeOrder[this.currentTheme]].length; t++)document.body.style.setProperty(...this.colorThemes[this.themeOrder[this.currentTheme]][t]) } displayOnLoad() { this.changeTheme() } display() { 0 == this.timesVisited ? q.startTutorial("Settings Page", !0, "SettingsPage") : 1 == this.timesVisited && (at.pageButtons.container.parentElement.hidden = !1), this.timesVisited++ } displayEveryTick() { } save() { let t = super.save() + "/*/"; return t += String(this.currentTheme - 1), t } load(t) { const e = t.split("/*/"); let s = super.load(e) || 0; return this.currentTheme = Number(e[s]) <= -1 ? -1 : Number(e[s]), this.changeTheme(), s } }("SettingsPage"), Mt = new class extends L { constructor() { super(...arguments), this.gold = new f(25), this.armies = [new St, new St, new St], this.inventory = { creatures: {}, weapons: {} } } save() { let t = this.gold + "/*/"; t += Object.keys(this.inventory).length; for (const e in this.inventory) { const s = e; t += "/*/" + s, t += "/*/" + Object.keys(this.inventory[s]).length; for (const e in this.inventory[s]) t += "/*/" + e + "/*/" + this.inventory[s][e] } t += "/*/" + this.armies.length; for (let e = 0; e < this.armies.length; e++)t += "/*/" + this.armies[e].save(); return t } load(t) { t.split("/*/"); let e = 0; this.gold = new f(t[e]), e++, this.inventory = { creatures: {}, weapons: {} }; let s = Number(t[e]), i = 0; for (e++; s > 0;) { const n = t[e]; for (e++, i = Number(t[e]), e++, this.inventory[n] = {}; i > 0;)this.inventory[n][t[e]] = new f(t[e + 1]), e += 2, i--; s-- } for (s = Number(t[e]), e++, i = 0; s > 0;)e = this.armies[i].load(t, e, i), i++, s-- } }, _t = new class { LoadOfflineProgress(t) { throw new Error("Method not implemented.") } constructor() { this.currentPage = "StorePage", this.pages = {}, [j, rt, dt, Pt, z, W, Nt, q].forEach((t => { this.pages[t.name] = t })); for (const t of Object.keys(this.pages)) this.pages[t].hidden = !0; this.canSave = !0, this.initializeEventListeners() } startSaveInterval() { } stopSaveInterval() { clearInterval(this.saveInterval) } startRenderInterval(t) { this.renderInterval = setInterval((() => { this.pages[t].displayEveryTick() }), 50) } stopRenderInterval() { clearInterval(this.renderInterval), this.renderInterval = void 0 } swapRenderPage(t) { this.stopRenderInterval(), this.startRenderInterval(t) } initializeEventListeners() { window.addEventListener("load", (() => { this.openGame(), this.startSaveInterval() })), document.addEventListener("visibilitychange", (() => { "visible" === document.visibilityState ? (this.loadOfflineProgress(Date.now() - Number(localStorage.getItem("lastSavedTime"))), this.startSaveInterval()) : (0 != localStorage.length && this.saveToLocalStorage(), this.stopSaveInterval()) })), window.addEventListener("beforeunload", (() => { this.closeGame() })) } loadOfflineProgress(t = 0) { const e = new f(t / 1e3), s = j.Tower.getGoldPerSecond().mul(e); Mt.gold = Mt.gold.add(s) } saveToLocalStorage() { this.canSave && (localStorage.clear(), localStorage.setItem("Player", Mt.save()), localStorage.setItem("Statistics", xt.save()), localStorage.setItem("Unlocks", kt.save()), Object.entries(this.pages).forEach((([t, e]) => { localStorage.setItem(t, e.save()) })), localStorage.setItem("currentPage", this.currentPage), localStorage.setItem("lastSavedTime", Date.now() + "")) } loadFromLocalStorage() { Mt.load(localStorage.getItem("Player")), xt.load(localStorage.getItem("Statistics")), kt.load(localStorage.getItem("Unlocks")), Object.entries(this.pages).forEach((([t, e]) => { e.load(localStorage.getItem(t)) })); const t = localStorage.getItem("currentPage"); "TowerPage" == t ? (at.pageButtons.selected = 1, this.currentPage = "ArmyPage") : (at.pageButtons.selected = 0, this.currentPage = "TowerPage"); for (let e = 0; e < at.pageButtons.buttons.length; e++)at.pageButtons.buttons[e].getAttribute("page") == t && at.pageButtons.buttonClick(e); return this.loadOfflineProgress(Date.now() - Number(localStorage.getItem("lastSavedTime"))), !0 } openGame() { 0 != localStorage.length || this.saveToLocalStorage(), this.loadFromLocalStorage() } closeGame() { } resetLocalStorage() { this.stopSaveInterval(), localStorage.clear(), this.saveToLocalStorage(), this.loadFromLocalStorage(), this.startSaveInterval() } toggleCanSave() { this.canSave = !this.canSave } hidePages(t) { t != this.currentPage && (clearInterval(Et), this.pages[this.currentPage].hidden = !0, this.pages[t].hidden = !1, this.currentPage = t, this.pages[t].display()) } }; let Et = setInterval((() => { Pt.displayEveryTick() }), 50); const Ct = v("#GoldText"); v("#ContinueFromOfflineProgress").addEventListener("click", (() => { const t = localStorage.getItem("currentPage"); v("#OfflinePageContainer").hidden = !0, v("#PageButtonsContainer").hidden = !1, Ct.parentElement.hidden = !1, _t.hidePages(t) })), window.addEventListener("load", (() => { _t.openGame() })), setInterval((function () { Ct.innerHTML = w(Mt.gold); for (let t = 0; t < j.Tower.raidedLevels.length; t++)j.Tower.floors[j.Tower.raidedLevels[t][0]].levels[j.Tower.raidedLevels[t][1]].tick(20) }), 50) })() })();